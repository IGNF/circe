/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#include "circe.h"
#include "parser.h"
#include "pt4d.h"
#include "geodeticset.h"


#include <string>


#include <typeinfo>
#include <stdexcept>


#include <vector>
#include <stdexcept>

SWIGINTERN std::vector< std::string >::const_reference std_vector_Sl_std_string_Sg__get(std::vector< std::string > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_string_Sg__set(std::vector< std::string > *self,int i,std::vector< std::string >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< double >::const_reference std_vector_Sl_double_Sg__get(std::vector< double > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_double_Sg__set(std::vector< double > *self,int i,std::vector< double >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

	struct geodeticOptions
{
    std::string geodeticFrameId, geodeticCRSid, verticalFrameId, verticalCRSid;
    std::string usesForTransformation, formatId, linearUnit, angularUnit;
    std::string pathname;
    double epoch;
    circe::FILE_FORMAT subformatId;
    bool useGeodeticCRS, useVerticalCRS, verticalFrameAuthoritative;
    circe::CRS_TYPE geodeticCRStype;
};

struct circeOptions
{
    std::string appTitle, appCopyright, appVersion, appDescription, appHelp, appStyle, appUserManual;
    geodeticOptions sourceOptions;
    geodeticOptions targetOptions;
    std::string idGeodeticTransfoRequired, idVerticalTransfoRequired;
    circe::DATA_MODE dataMode;
    std::string metadataFile, gridLoading, logPathname, optionFile, imageFilename, logoFilename, iconFilename, boundaryFile;
    int displayHelp, runTest, multipleCRS, quiet, verbose, scaleConv, processAsVector;
    int getCRSlist, getValidityArea, getAuthority, followUpTransfos;
    int getSourceGeodeticFrame, getSourceGeodeticCRS, getSourceVerticalCRS;
    int getTargetGeodeticFrame, getTargetGeodeticCRS, getTargetVerticalCRS;
    int getDataFileFormat, getDataPointFormat, getUom;
    int getGeodeticTransfo, getVerticalTransfo;
    int getAllGeodeticSubsetLists, getZoneList;
    circe::pt4d Pt4d;
    bool printCS, displayBoundingBox, noPrintSppm, noUseVerticalFrameAuthoritative, scrollArea, plainDMS;
	double displayPrecision;
    std::string outputFormat, operationType;
};

/*
//#include "StringResources.h"
//#include "StringResourcesEN.h"

static const std::string CIRCE_ERROR = "CIRCE ERROR";


enum CRS_TYPE
{
    CT_UNDEF,
    CT_GEOCENTRIC,
    CT_GEOGRAPHIC,
    CT_PROJECTED,
    CT_VERTICAL,
    CT_COUNT
};

enum SYSTEM_DIMENSION
{
    SD_UNDEF,
    SD_1D,
    SD_2D,
    SD_3D,
    SD_4D,
    SD_COUNT
};

enum DATA_MODE
{
    DM_UNDEF,
    DM_FILE,
    DM_POINT,
    DM_LIST,
    DM_COUNT
};

enum MULTIPLE_CRS_PROCESSING
{
	MP_UNDEF,
	MP_TEST,
	MP_CALC,
	MP_COUNT
};

struct pt4d{std::string id; double x; double y; double z; 
			double l; double p; double h; double e; double n; double w;
            double conv; double scfact; circe::CRS_TYPE CRStypeInit;
           };
		   
struct geodeticSubset
{
    std::vector<std::string> geodeticFrameIdList, geodeticFrameDisplayList;
    std::vector<std::string> geodeticCRSidList, geodeticCRSdisplayList;
    std::vector<std::string> verticalFrameIdList, verticalFrameDisplayList;
    std::vector<std::string> dataFileFormatList, dataFileFormatDisplayList;
    std::vector<std::string> dataPointFormatList, dataPointFormatDisplayList;
    std::vector<std::string> dataUnitList, dataUnitDisplayList;
    int iGeodeticFrame, iGeodeticCRS, iVerticalFrame, iDataFileFormat, iDataPointFormat, iDataUnit;
    circe::SYSTEM_DIMENSION geodeticDimension;
};

struct operationSubset
{
    geodeticSubset sourceSubset, targetSubset;
    std::vector<std::string> geodeticTransfoIdList, verticalTransfoIdList;
    std::vector<std::string> geodeticTransfoDisplayList, verticalTransfoDisplayList;
    int iGeodeticTransfo, iVerticalTransfo;
};


*/

SWIGINTERN std::vector< circe::pt4d >::const_reference std_vector_Sl_circe_pt4d_Sg__get(std::vector< circe::pt4d > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_circe_pt4d_Sg__set(std::vector< circe::pt4d > *self,int i,std::vector< circe::pt4d >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_new_1stringVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::string > *)new std::vector< std::string >();
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_new_1stringVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::string >::size_type arg1 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::string >::size_type)jarg1; 
  result = (std::vector< std::string > *)new std::vector< std::string >(arg1);
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_stringVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = ((std::vector< std::string > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_stringVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = ((std::vector< std::string > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_stringVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (std::vector< std::string >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_ign_circe_circeJNI_stringVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = (bool)((std::vector< std::string > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_stringVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_stringVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::vector< std::string >::value_type arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->push_back((std::vector< std::string >::value_type const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_stringVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_stringVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::vector< std::string >::value_type arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  try {
    std_vector_Sl_std_string_Sg__set(arg1,arg2,(std::string const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_delete_1stringVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_new_1doubleVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< double > *)new std::vector< double >();
  *(std::vector< double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_new_1doubleVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< double >::size_type arg1 ;
  std::vector< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< double >::size_type)jarg1; 
  result = (std::vector< double > *)new std::vector< double >(arg1);
  *(std::vector< double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_doubleVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  result = ((std::vector< double > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_doubleVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  result = ((std::vector< double > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_doubleVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  arg2 = (std::vector< double >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_ign_circe_circeJNI_doubleVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  result = (bool)((std::vector< double > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_doubleVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_doubleVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::value_type *arg2 = 0 ;
  std::vector< double >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  temp2 = (std::vector< double >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< double >::value_type const &)*arg2);
}


SWIGEXPORT jdouble JNICALL Java_ign_circe_circeJNI_doubleVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  std::vector< double >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< double >::value_type *) &std_vector_Sl_double_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jdouble)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_doubleVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  std::vector< double >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< double >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_double_Sg__set(arg1,arg2,(double const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_delete_1doubleVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< double > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_MessageBearer_1messageEdit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circe::MessageBearer *arg1 = (circe::MessageBearer *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::MessageBearer **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->messageEdit(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_MessageBearer_1setCurrentMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circe::MessageBearer *arg1 = (circe::MessageBearer *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::MessageBearer **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setCurrentMessage(arg2);
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_MessageBearer_1getCurrentMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  circe::MessageBearer *arg1 = (circe::MessageBearer *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::MessageBearer **)&jarg1; 
  result = (arg1)->getCurrentMessage();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_delete_1MessageBearer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  circe::MessageBearer *arg1 = (circe::MessageBearer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(circe::MessageBearer **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_SeparatorValues_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *)(std::string *)circe::SeparatorValues;
  *(std::string **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_T_1UNDEF_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  circe::TRANSFO_REQUIRED result;
  
  (void)jenv;
  (void)jcls;
  result = (circe::TRANSFO_REQUIRED)circe::T_UNDEF;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_T_1GEODETIC_1REQUIRED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  circe::TRANSFO_REQUIRED result;
  
  (void)jenv;
  (void)jcls;
  result = (circe::TRANSFO_REQUIRED)circe::T_GEODETIC_REQUIRED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_T_1VERTICAL_1REQUIRED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  circe::TRANSFO_REQUIRED result;
  
  (void)jenv;
  (void)jcls;
  result = (circe::TRANSFO_REQUIRED)circe::T_VERTICAL_REQUIRED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_T_1VERTICAL_1VERTICAL_1GEOD0_1REQUIRED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  circe::TRANSFO_REQUIRED result;
  
  (void)jenv;
  (void)jcls;
  result = (circe::TRANSFO_REQUIRED)circe::T_VERTICAL_VERTICAL_GEOD0_REQUIRED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_T_1VERTICAL_1VERTICAL_1GEOD1_1REQUIRED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  circe::TRANSFO_REQUIRED result;
  
  (void)jenv;
  (void)jcls;
  result = (circe::TRANSFO_REQUIRED)circe::T_VERTICAL_VERTICAL_GEOD1_REQUIRED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_T_1VERTICAL_1VERTICAL_1GEOD2_1REQUIRED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  circe::TRANSFO_REQUIRED result;
  
  (void)jenv;
  (void)jcls;
  result = (circe::TRANSFO_REQUIRED)circe::T_VERTICAL_VERTICAL_GEOD2_REQUIRED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_T_1GEODETIC1_1VERTICAL_1REQUIRED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  circe::TRANSFO_REQUIRED result;
  
  (void)jenv;
  (void)jcls;
  result = (circe::TRANSFO_REQUIRED)circe::T_GEODETIC1_VERTICAL_REQUIRED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_T_1GEODETIC2_1VERTICAL_1REQUIRED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  circe::TRANSFO_REQUIRED result;
  
  (void)jenv;
  (void)jcls;
  result = (circe::TRANSFO_REQUIRED)circe::T_GEODETIC2_VERTICAL_REQUIRED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_T_1VERTICAL_1GEODETIC1_1REQUIRED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  circe::TRANSFO_REQUIRED result;
  
  (void)jenv;
  (void)jcls;
  result = (circe::TRANSFO_REQUIRED)circe::T_VERTICAL_GEODETIC1_REQUIRED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_T_1VERTICAL_1GEODETIC2_1REQUIRED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  circe::TRANSFO_REQUIRED result;
  
  (void)jenv;
  (void)jcls;
  result = (circe::TRANSFO_REQUIRED)circe::T_VERTICAL_GEODETIC2_REQUIRED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_GridTypeText_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::string *arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::string **)&jarg1; 
  {
    size_t ii;
    std::string *b = (std::string *) circe::GridTypeText;
    for (ii = 0; ii < (size_t)circe::GF_COUNT; ii++) b[ii] = *((std::string *) arg1 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_GridTypeText_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *)(std::string *)circe::GridTypeText;
  *(std::string **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_LoadingTypeText_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *)(std::string *)circe::LoadingTypeText;
  *(std::string **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_EncodingTypeText_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::string *arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::string **)&jarg1; 
  {
    size_t ii;
    std::string *b = (std::string *) circe::EncodingTypeText;
    for (ii = 0; ii < (size_t)circe::ET_COUNT; ii++) b[ii] = *((std::string *) arg1 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_EncodingTypeText_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *)(std::string *)circe::EncodingTypeText;
  *(std::string **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_MeasureUnitAttributeText_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *)(std::string *)circe::MeasureUnitAttributeText;
  *(std::string **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_CRStypeAttributeText_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *)(std::string *)circe::CRStypeAttributeText;
  *(std::string **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_BoolText_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *)(std::string *)circe::BoolText;
  *(std::string **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_OperationApplicationText_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *)(std::string *)circe::OperationApplicationText;
  *(std::string **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_StatusText_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *)(std::string *)circe::StatusText;
  *(std::string **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_FileFormatText_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *)(std::string *)circe::FileFormatText;
  *(std::string **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_uiFormat_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *)(std::string *)circe::uiFormat;
  *(std::string **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_displayFormat_1n_1m_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  circe::displayFormat *arg1 = (circe::displayFormat *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::displayFormat **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->n_m = arg2;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_displayFormat_1n_1m_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  circe::displayFormat *arg1 = (circe::displayFormat *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::displayFormat **)&jarg1; 
  result = (unsigned int) ((arg1)->n_m);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_displayFormat_1n_1ang_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  circe::displayFormat *arg1 = (circe::displayFormat *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::displayFormat **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->n_ang = arg2;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_displayFormat_1n_1ang_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  circe::displayFormat *arg1 = (circe::displayFormat *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::displayFormat **)&jarg1; 
  result = (unsigned int) ((arg1)->n_ang);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_displayFormat_1angularUnit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circe::displayFormat *arg1 = (circe::displayFormat *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::displayFormat **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->angularUnit = *arg2;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_displayFormat_1angularUnit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  circe::displayFormat *arg1 = (circe::displayFormat *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::displayFormat **)&jarg1; 
  result = (std::string *) & ((arg1)->angularUnit);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_displayFormat_1plainDMS_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  circe::displayFormat *arg1 = (circe::displayFormat *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::displayFormat **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->plainDMS = arg2;
}


SWIGEXPORT jboolean JNICALL Java_ign_circe_circeJNI_displayFormat_1plainDMS_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  circe::displayFormat *arg1 = (circe::displayFormat *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::displayFormat **)&jarg1; 
  result = (bool) ((arg1)->plainDMS);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_new_1displayFormat(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  circe::displayFormat *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (circe::displayFormat *)new circe::displayFormat();
  *(circe::displayFormat **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_delete_1displayFormat(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  circe::displayFormat *arg1 = (circe::displayFormat *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(circe::displayFormat **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_pt4d_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circe::pt4d *arg1 = (circe::pt4d *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::pt4d **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->id = *arg2;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_pt4d_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  circe::pt4d *arg1 = (circe::pt4d *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::pt4d **)&jarg1; 
  result = (std::string *) & ((arg1)->id);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_pt4d_1x_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  circe::pt4d *arg1 = (circe::pt4d *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::pt4d **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT jdouble JNICALL Java_ign_circe_circeJNI_pt4d_1x_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  circe::pt4d *arg1 = (circe::pt4d *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::pt4d **)&jarg1; 
  result = (double) ((arg1)->x);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_pt4d_1y_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  circe::pt4d *arg1 = (circe::pt4d *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::pt4d **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT jdouble JNICALL Java_ign_circe_circeJNI_pt4d_1y_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  circe::pt4d *arg1 = (circe::pt4d *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::pt4d **)&jarg1; 
  result = (double) ((arg1)->y);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_pt4d_1z_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  circe::pt4d *arg1 = (circe::pt4d *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::pt4d **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->z = arg2;
}


SWIGEXPORT jdouble JNICALL Java_ign_circe_circeJNI_pt4d_1z_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  circe::pt4d *arg1 = (circe::pt4d *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::pt4d **)&jarg1; 
  result = (double) ((arg1)->z);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_pt4d_1l_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  circe::pt4d *arg1 = (circe::pt4d *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::pt4d **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->l = arg2;
}


SWIGEXPORT jdouble JNICALL Java_ign_circe_circeJNI_pt4d_1l_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  circe::pt4d *arg1 = (circe::pt4d *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::pt4d **)&jarg1; 
  result = (double) ((arg1)->l);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_pt4d_1p_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  circe::pt4d *arg1 = (circe::pt4d *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::pt4d **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->p = arg2;
}


SWIGEXPORT jdouble JNICALL Java_ign_circe_circeJNI_pt4d_1p_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  circe::pt4d *arg1 = (circe::pt4d *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::pt4d **)&jarg1; 
  result = (double) ((arg1)->p);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_pt4d_1h_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  circe::pt4d *arg1 = (circe::pt4d *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::pt4d **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->h = arg2;
}


SWIGEXPORT jdouble JNICALL Java_ign_circe_circeJNI_pt4d_1h_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  circe::pt4d *arg1 = (circe::pt4d *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::pt4d **)&jarg1; 
  result = (double) ((arg1)->h);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_pt4d_1e_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  circe::pt4d *arg1 = (circe::pt4d *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::pt4d **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->e = arg2;
}


SWIGEXPORT jdouble JNICALL Java_ign_circe_circeJNI_pt4d_1e_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  circe::pt4d *arg1 = (circe::pt4d *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::pt4d **)&jarg1; 
  result = (double) ((arg1)->e);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_pt4d_1n_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  circe::pt4d *arg1 = (circe::pt4d *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::pt4d **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->n = arg2;
}


SWIGEXPORT jdouble JNICALL Java_ign_circe_circeJNI_pt4d_1n_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  circe::pt4d *arg1 = (circe::pt4d *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::pt4d **)&jarg1; 
  result = (double) ((arg1)->n);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_pt4d_1w_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  circe::pt4d *arg1 = (circe::pt4d *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::pt4d **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->w = arg2;
}


SWIGEXPORT jdouble JNICALL Java_ign_circe_circeJNI_pt4d_1w_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  circe::pt4d *arg1 = (circe::pt4d *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::pt4d **)&jarg1; 
  result = (double) ((arg1)->w);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_pt4d_1conv_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  circe::pt4d *arg1 = (circe::pt4d *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::pt4d **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->conv = arg2;
}


SWIGEXPORT jdouble JNICALL Java_ign_circe_circeJNI_pt4d_1conv_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  circe::pt4d *arg1 = (circe::pt4d *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::pt4d **)&jarg1; 
  result = (double) ((arg1)->conv);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_pt4d_1scfact_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  circe::pt4d *arg1 = (circe::pt4d *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::pt4d **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->scfact = arg2;
}


SWIGEXPORT jdouble JNICALL Java_ign_circe_circeJNI_pt4d_1scfact_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  circe::pt4d *arg1 = (circe::pt4d *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::pt4d **)&jarg1; 
  result = (double) ((arg1)->scfact);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_pt4d_1xi_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  circe::pt4d *arg1 = (circe::pt4d *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::pt4d **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->xi = arg2;
}


SWIGEXPORT jdouble JNICALL Java_ign_circe_circeJNI_pt4d_1xi_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  circe::pt4d *arg1 = (circe::pt4d *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::pt4d **)&jarg1; 
  result = (double) ((arg1)->xi);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_pt4d_1eta_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  circe::pt4d *arg1 = (circe::pt4d *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::pt4d **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->eta = arg2;
}


SWIGEXPORT jdouble JNICALL Java_ign_circe_circeJNI_pt4d_1eta_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  circe::pt4d *arg1 = (circe::pt4d *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::pt4d **)&jarg1; 
  result = (double) ((arg1)->eta);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_pt4d_1CRStypeInit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  circe::pt4d *arg1 = (circe::pt4d *) 0 ;
  circe::CRS_TYPE arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::pt4d **)&jarg1; 
  arg2 = (circe::CRS_TYPE)jarg2; 
  if (arg1) (arg1)->CRStypeInit = arg2;
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_pt4d_1CRStypeInit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  circe::pt4d *arg1 = (circe::pt4d *) 0 ;
  circe::CRS_TYPE result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::pt4d **)&jarg1; 
  result = (circe::CRS_TYPE) ((arg1)->CRStypeInit);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_pt4d_1Gprec_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  circe::pt4d *arg1 = (circe::pt4d *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::pt4d **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Gprec = arg2;
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_pt4d_1Gprec_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  circe::pt4d *arg1 = (circe::pt4d *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::pt4d **)&jarg1; 
  result = (int) ((arg1)->Gprec);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_pt4d_1Vprec_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  circe::pt4d *arg1 = (circe::pt4d *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::pt4d **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Vprec = arg2;
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_pt4d_1Vprec_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  circe::pt4d *arg1 = (circe::pt4d *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::pt4d **)&jarg1; 
  result = (int) ((arg1)->Vprec);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_pt4d_1frmt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  circe::pt4d *arg1 = (circe::pt4d *) 0 ;
  circe::displayFormat *arg2 = (circe::displayFormat *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(circe::pt4d **)&jarg1; 
  arg2 = *(circe::displayFormat **)&jarg2; 
  if (arg1) (arg1)->frmt = *arg2;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_pt4d_1frmt_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  circe::pt4d *arg1 = (circe::pt4d *) 0 ;
  circe::displayFormat *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::pt4d **)&jarg1; 
  result = (circe::displayFormat *)& ((arg1)->frmt);
  *(circe::displayFormat **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_pt4d_1info_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circe::pt4d *arg1 = (circe::pt4d *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::pt4d **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->info = *arg2;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_pt4d_1info_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  circe::pt4d *arg1 = (circe::pt4d *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::pt4d **)&jarg1; 
  result = (std::string *) & ((arg1)->info);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_pt4d_1info2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circe::pt4d *arg1 = (circe::pt4d *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::pt4d **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->info2 = *arg2;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_pt4d_1info2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  circe::pt4d *arg1 = (circe::pt4d *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::pt4d **)&jarg1; 
  result = (std::string *) & ((arg1)->info2);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_pt4d_1transfoIndex_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  circe::pt4d *arg1 = (circe::pt4d *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::pt4d **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->transfoIndex = arg2;
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_pt4d_1transfoIndex_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  circe::pt4d *arg1 = (circe::pt4d *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::pt4d **)&jarg1; 
  result = (int) ((arg1)->transfoIndex);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_new_1pt4d(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  circe::pt4d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (circe::pt4d *)new circe::pt4d();
  *(circe::pt4d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_delete_1pt4d(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  circe::pt4d *arg1 = (circe::pt4d *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(circe::pt4d **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_initFormats(JNIEnv *jenv, jclass jcls, jdouble jarg1, jstring jarg2, jlong jarg3, jobject jarg3_) {
  double arg1 ;
  std::string arg2 ;
  circe::displayFormat *arg3 = (circe::displayFormat *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  arg1 = (double)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(circe::displayFormat **)&jarg3; 
  circe::initFormats(arg1,arg2,arg3);
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_precisionCode2Text(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  int arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = circe::precisionCode2Text(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_ComparePoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5) {
  jstring jresult = 0 ;
  circe::pt4d *arg1 = (circe::pt4d *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::pt4d **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  result = circe::ComparePoint(arg1,arg2,arg3,arg4,arg5);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_ign_circe_circeJNI_ComparePoint2(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jlong jarg3, jobject jarg3_, jdouble jarg4, jdouble jarg5, jdouble jarg6, jdouble jarg7, jint jarg8, jint jarg9, jlong jarg10, jlong jarg11) {
  jboolean jresult = 0 ;
  double arg1 ;
  double arg2 ;
  circe::pt4d *arg3 = (circe::pt4d *) 0 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  circe::MEASURE_UNIT arg8 ;
  circe::MEASURE_UNIT arg9 ;
  std::string *arg10 = (std::string *) 0 ;
  double *arg11 = (double *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = *(circe::pt4d **)&jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = (circe::MEASURE_UNIT)jarg8; 
  arg9 = (circe::MEASURE_UNIT)jarg9; 
  arg10 = *(std::string **)&jarg10; 
  arg11 = *(double **)&jarg11; 
  result = (bool)circe::ComparePoint2(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_InitDefPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  circe::pt4d *arg1 = (circe::pt4d *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::pt4d **)&jarg1; 
  circe::InitDefPoint(arg1);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_InitPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5) {
  circe::pt4d *arg1 = (circe::pt4d *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::pt4d **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  circe::InitPoint(arg1,arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_copyPt4d_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  circe::pt4d *arg1 = 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::pt4d **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "circe::pt4d const & reference is null");
    return ;
  } 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = *(double **)&jarg4; 
  arg5 = *(double **)&jarg5; 
  circe::copyPt4d((circe::pt4d const &)*arg1,arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_copyPt4d_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  circe::pt4d *arg1 = (circe::pt4d *) 0 ;
  circe::pt4d *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(circe::pt4d **)&jarg1; 
  arg2 = *(circe::pt4d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "circe::pt4d const & reference is null");
    return ;
  } 
  circe::copyPt4d(arg1,(circe::pt4d const &)*arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_copyPt4dVertical(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  circe::pt4d *arg1 = (circe::pt4d *) 0 ;
  circe::pt4d *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(circe::pt4d **)&jarg1; 
  arg2 = *(circe::pt4d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "circe::pt4d const & reference is null");
    return ;
  } 
  circe::copyPt4dVertical(arg1,(circe::pt4d const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_displayElement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  jstring jresult = 0 ;
  circe::pt4d *arg1 = 0 ;
  char arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::pt4d **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "circe::pt4d const & reference is null");
    return 0;
  } 
  arg2 = (char)jarg2; 
  result = circe::displayElement((circe::pt4d const &)*arg1,arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_displayEpoch(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jstring jresult = 0 ;
  double arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  result = circe::displayEpoch(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_CirceObject_1mb_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  circe::CirceObject *arg1 = (circe::CirceObject *) 0 ;
  circe::MessageBearer *arg2 = (circe::MessageBearer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(circe::CirceObject **)&jarg1; 
  arg2 = *(circe::MessageBearer **)&jarg2; 
  if (arg1) (arg1)->mb = arg2;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_CirceObject_1mb_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  circe::CirceObject *arg1 = (circe::CirceObject *) 0 ;
  circe::MessageBearer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::CirceObject **)&jarg1; 
  result = (circe::MessageBearer *) ((arg1)->mb);
  *(circe::MessageBearer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_new_1CirceObject_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  circe::CirceObject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (circe::CirceObject *)new circe::CirceObject();
  *(circe::CirceObject **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_new_1CirceObject_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  circe::CirceObject *arg1 = 0 ;
  circe::CirceObject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::CirceObject **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "circe::CirceObject const & reference is null");
    return 0;
  } 
  result = (circe::CirceObject *)new circe::CirceObject((circe::CirceObject const &)*arg1);
  *(circe::CirceObject **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_delete_1CirceObject(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  circe::CirceObject *arg1 = (circe::CirceObject *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(circe::CirceObject **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_CirceObject_1setCirceId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circe::CirceObject *arg1 = (circe::CirceObject *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::CirceObject **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setCirceId(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_CirceObject_1setIGNid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circe::CirceObject *arg1 = (circe::CirceObject *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::CirceObject **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setIGNid(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_CirceObject_1setName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circe::CirceObject *arg1 = (circe::CirceObject *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::CirceObject **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setName(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_CirceObject_1setEPSGid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circe::CirceObject *arg1 = (circe::CirceObject *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::CirceObject **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setEPSGid(arg2);
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_CirceObject_1getCirceId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  circe::CirceObject *arg1 = (circe::CirceObject *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::CirceObject **)&jarg1; 
  result = ((circe::CirceObject const *)arg1)->getCirceId();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_CirceObject_1getIGNid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  circe::CirceObject *arg1 = (circe::CirceObject *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::CirceObject **)&jarg1; 
  result = ((circe::CirceObject const *)arg1)->getIGNid();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_CirceObject_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  circe::CirceObject *arg1 = (circe::CirceObject *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::CirceObject **)&jarg1; 
  result = ((circe::CirceObject const *)arg1)->getName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_CirceObject_1getEPSGid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  circe::CirceObject *arg1 = (circe::CirceObject *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::CirceObject **)&jarg1; 
  result = ((circe::CirceObject const *)arg1)->getEPSGid();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_CirceObject_1parseNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  circe::CirceObject *arg1 = (circe::CirceObject *) 0 ;
  tinyxml2::XMLElement *arg2 = (tinyxml2::XMLElement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::CirceObject **)&jarg1; 
  arg2 = *(tinyxml2::XMLElement **)&jarg2; 
  (arg1)->parseNames(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_CirceObject_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  circe::CirceObject *arg1 = (circe::CirceObject *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::CirceObject **)&jarg1; 
  (arg1)->reset();
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_poly_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circe::poly *arg1 = (circe::poly *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::poly **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->id = *arg2;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_poly_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  circe::poly *arg1 = (circe::poly *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::poly **)&jarg1; 
  result = (std::string *) & ((arg1)->id);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_poly_1bound_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  circe::poly *arg1 = (circe::poly *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(circe::poly **)&jarg1; 
  arg2 = *(std::vector< double > **)&jarg2; 
  if (arg1) (arg1)->bound = *arg2;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_poly_1bound_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  circe::poly *arg1 = (circe::poly *) 0 ;
  std::vector< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::poly **)&jarg1; 
  result = (std::vector< double > *)& ((arg1)->bound);
  *(std::vector< double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_new_1poly(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  circe::poly *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (circe::poly *)new circe::poly();
  *(circe::poly **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_delete_1poly(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  circe::poly *arg1 = (circe::poly *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(circe::poly **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_new_1CirceBoundedObject_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  circe::CirceBoundedObject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (circe::CirceBoundedObject *)new circe::CirceBoundedObject();
  *(circe::CirceBoundedObject **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_new_1CirceBoundedObject_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  circe::CirceBoundedObject *arg1 = 0 ;
  circe::CirceBoundedObject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::CirceBoundedObject **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "circe::CirceBoundedObject const & reference is null");
    return 0;
  } 
  result = (circe::CirceBoundedObject *)new circe::CirceBoundedObject((circe::CirceBoundedObject const &)*arg1);
  *(circe::CirceBoundedObject **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_CirceBoundedObject_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  circe::CirceBoundedObject *arg1 = (circe::CirceBoundedObject *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::CirceBoundedObject **)&jarg1; 
  (arg1)->reset();
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_CirceBoundedObject_1copyBounds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  circe::CirceBoundedObject *arg1 = (circe::CirceBoundedObject *) 0 ;
  circe::CirceBoundedObject *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(circe::CirceBoundedObject **)&jarg1; 
  arg2 = *(circe::CirceBoundedObject **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "circe::CirceBoundedObject const & reference is null");
    return ;
  } 
  (arg1)->copyBounds((circe::CirceBoundedObject const &)*arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_CirceBoundedObject_1setWestBound_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  circe::CirceBoundedObject *arg1 = (circe::CirceBoundedObject *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::CirceBoundedObject **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setWestBound(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_CirceBoundedObject_1setEastBound_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  circe::CirceBoundedObject *arg1 = (circe::CirceBoundedObject *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::CirceBoundedObject **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setEastBound(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_CirceBoundedObject_1setNorthBound_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  circe::CirceBoundedObject *arg1 = (circe::CirceBoundedObject *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::CirceBoundedObject **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setNorthBound(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_CirceBoundedObject_1setSouthBound_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  circe::CirceBoundedObject *arg1 = (circe::CirceBoundedObject *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::CirceBoundedObject **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setSouthBound(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_CirceBoundedObject_1setWestBound_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circe::CirceBoundedObject *arg1 = (circe::CirceBoundedObject *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::CirceBoundedObject **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setWestBound(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_CirceBoundedObject_1setEastBound_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circe::CirceBoundedObject *arg1 = (circe::CirceBoundedObject *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::CirceBoundedObject **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setEastBound(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_CirceBoundedObject_1setSouthBound_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circe::CirceBoundedObject *arg1 = (circe::CirceBoundedObject *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::CirceBoundedObject **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setSouthBound(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_CirceBoundedObject_1setNorthBound_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circe::CirceBoundedObject *arg1 = (circe::CirceBoundedObject *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::CirceBoundedObject **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setNorthBound(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_CirceBoundedObject_1setBoundUnit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circe::CirceBoundedObject *arg1 = (circe::CirceBoundedObject *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::CirceBoundedObject **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setBoundUnit(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_CirceBoundedObject_1setArea(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  circe::CirceBoundedObject *arg1 = (circe::CirceBoundedObject *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::CirceBoundedObject **)&jarg1; 
  (arg1)->setArea();
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_CirceBoundedObject_1setHasPolygonBound(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  circe::CirceBoundedObject *arg1 = (circe::CirceBoundedObject *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::CirceBoundedObject **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setHasPolygonBound(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_CirceBoundedObject_1setPolygonBound(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  circe::CirceBoundedObject *arg1 = (circe::CirceBoundedObject *) 0 ;
  circe::poly *arg2 = (circe::poly *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(circe::CirceBoundedObject **)&jarg1; 
  arg2 = *(circe::poly **)&jarg2; 
  (arg1)->setPolygonBound(arg2);
}


SWIGEXPORT jdouble JNICALL Java_ign_circe_circeJNI_CirceBoundedObject_1getWestBound(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  circe::CirceBoundedObject *arg1 = (circe::CirceBoundedObject *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::CirceBoundedObject **)&jarg1; 
  result = (double)((circe::CirceBoundedObject const *)arg1)->getWestBound();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_ign_circe_circeJNI_CirceBoundedObject_1getEastBound(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  circe::CirceBoundedObject *arg1 = (circe::CirceBoundedObject *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::CirceBoundedObject **)&jarg1; 
  result = (double)((circe::CirceBoundedObject const *)arg1)->getEastBound();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_ign_circe_circeJNI_CirceBoundedObject_1getNorthBound(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  circe::CirceBoundedObject *arg1 = (circe::CirceBoundedObject *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::CirceBoundedObject **)&jarg1; 
  result = (double)((circe::CirceBoundedObject const *)arg1)->getNorthBound();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_ign_circe_circeJNI_CirceBoundedObject_1getSouthBound(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  circe::CirceBoundedObject *arg1 = (circe::CirceBoundedObject *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::CirceBoundedObject **)&jarg1; 
  result = (double)((circe::CirceBoundedObject const *)arg1)->getSouthBound();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_ign_circe_circeJNI_CirceBoundedObject_1getArea(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  circe::CirceBoundedObject *arg1 = (circe::CirceBoundedObject *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::CirceBoundedObject **)&jarg1; 
  result = (double)((circe::CirceBoundedObject const *)arg1)->getArea();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_ign_circe_circeJNI_CirceBoundedObject_1getHasPolygonBound(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  circe::CirceBoundedObject *arg1 = (circe::CirceBoundedObject *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::CirceBoundedObject **)&jarg1; 
  result = (bool)((circe::CirceBoundedObject const *)arg1)->getHasPolygonBound();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_CirceBoundedObject_1getPolygonBound(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  circe::CirceBoundedObject *arg1 = (circe::CirceBoundedObject *) 0 ;
  circe::poly *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::CirceBoundedObject **)&jarg1; 
  result = (circe::poly *)((circe::CirceBoundedObject const *)arg1)->getPolygonBound();
  *(circe::poly **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_ign_circe_circeJNI_CirceBoundedObject_1isInside(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  jboolean jresult = 0 ;
  circe::CirceBoundedObject *arg1 = (circe::CirceBoundedObject *) 0 ;
  double arg2 ;
  double arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::CirceBoundedObject **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)((circe::CirceBoundedObject const *)arg1)->isInside(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_ign_circe_circeJNI_CirceBoundedObject_1intersects(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  circe::CirceBoundedObject *arg1 = (circe::CirceBoundedObject *) 0 ;
  circe::CirceBoundedObject *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(circe::CirceBoundedObject **)&jarg1; 
  arg2 = *(circe::CirceBoundedObject **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "circe::CirceBoundedObject const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->intersects((circe::CirceBoundedObject const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_ign_circe_circeJNI_CirceBoundedObject_1CRSintersect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  circe::CirceBoundedObject *arg1 = (circe::CirceBoundedObject *) 0 ;
  circe::CirceBoundedObject *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(circe::CirceBoundedObject **)&jarg1; 
  arg2 = *(circe::CirceBoundedObject **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "circe::CirceBoundedObject const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->CRSintersect((circe::CirceBoundedObject const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_CirceBoundedObject_1getValidityArea(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  circe::CirceBoundedObject *arg1 = (circe::CirceBoundedObject *) 0 ;
  circe::MEASURE_UNIT arg2 ;
  std::string arg3 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::CirceBoundedObject **)&jarg1; 
  arg2 = (circe::MEASURE_UNIT)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (arg1)->getValidityArea(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_ign_circe_circeJNI_CirceBoundedObject_1isInsidePoly(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  double arg1 ;
  double arg2 ;
  circe::poly *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = *(circe::poly **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "circe::poly const & reference is null");
    return 0;
  } 
  result = (bool)circe::CirceBoundedObject::isInsidePoly(arg1,arg2,(circe::poly const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_CirceBoundedObject_1loadPolygons(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jlong jarg3, jobject jarg3_, jint jarg4) {
  jstring jresult = 0 ;
  std::string *arg1 = 0 ;
  std::vector< circe::poly > *arg2 = 0 ;
  circe::pt4d *arg3 = 0 ;
  int arg4 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(std::vector< circe::poly > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< circe::poly > & reference is null");
    return 0;
  } 
  arg3 = *(circe::pt4d **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "circe::pt4d const & reference is null");
    return 0;
  } 
  arg4 = (int)jarg4; 
  result = circe::CirceBoundedObject::loadPolygons((std::string const &)*arg1,*arg2,(circe::pt4d const &)*arg3,arg4);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_CirceBoundedObject_1findPolygon(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  circe::pt4d arg1 ;
  std::vector< circe::poly > *arg2 = 0 ;
  circe::pt4d *argp1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(circe::pt4d **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null circe::pt4d");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = *(std::vector< circe::poly > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< circe::poly > const & reference is null");
    return 0;
  } 
  result = circe::CirceBoundedObject::findPolygon(arg1,(std::vector< circe::poly > const &)*arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_delete_1CirceBoundedObject(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  circe::CirceBoundedObject *arg1 = (circe::CirceBoundedObject *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(circe::CirceBoundedObject **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_new_1Ellipsoid_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  circe::Ellipsoid *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (circe::Ellipsoid *)new circe::Ellipsoid();
  *(circe::Ellipsoid **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_new_1Ellipsoid_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  circe::Ellipsoid *arg1 = 0 ;
  circe::Ellipsoid *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Ellipsoid **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "circe::Ellipsoid const & reference is null");
    return 0;
  } 
  result = (circe::Ellipsoid *)new circe::Ellipsoid((circe::Ellipsoid const &)*arg1);
  *(circe::Ellipsoid **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Ellipsoid_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  circe::Ellipsoid *arg1 = (circe::Ellipsoid *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Ellipsoid **)&jarg1; 
  (arg1)->reset();
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Ellipsoid_1set_1a(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  circe::Ellipsoid *arg1 = (circe::Ellipsoid *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Ellipsoid **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->set_a(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Ellipsoid_1set_1b(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  circe::Ellipsoid *arg1 = (circe::Ellipsoid *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Ellipsoid **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->set_b(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Ellipsoid_1set_1f(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  circe::Ellipsoid *arg1 = (circe::Ellipsoid *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Ellipsoid **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->set_f(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Ellipsoid_1set_1e2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  circe::Ellipsoid *arg1 = (circe::Ellipsoid *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Ellipsoid **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->set_e2(arg2);
}


SWIGEXPORT jdouble JNICALL Java_ign_circe_circeJNI_Ellipsoid_1get_1a(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  circe::Ellipsoid *arg1 = (circe::Ellipsoid *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Ellipsoid **)&jarg1; 
  result = (double)((circe::Ellipsoid const *)arg1)->get_a();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_ign_circe_circeJNI_Ellipsoid_1get_1b(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  circe::Ellipsoid *arg1 = (circe::Ellipsoid *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Ellipsoid **)&jarg1; 
  result = (double)((circe::Ellipsoid const *)arg1)->get_b();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_ign_circe_circeJNI_Ellipsoid_1get_1e2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  circe::Ellipsoid *arg1 = (circe::Ellipsoid *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Ellipsoid **)&jarg1; 
  result = (double)((circe::Ellipsoid const *)arg1)->get_e2();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_ign_circe_circeJNI_Ellipsoid_1get_1f(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  circe::Ellipsoid *arg1 = (circe::Ellipsoid *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Ellipsoid **)&jarg1; 
  result = (double)((circe::Ellipsoid const *)arg1)->get_f();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Ellipsoid_1b_1_1e2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  circe::Ellipsoid *arg1 = (circe::Ellipsoid *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Ellipsoid **)&jarg1; 
  (arg1)->b__e2();
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Ellipsoid_1f_1_1e2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  circe::Ellipsoid *arg1 = (circe::Ellipsoid *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Ellipsoid **)&jarg1; 
  (arg1)->f__e2();
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_delete_1Ellipsoid(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  circe::Ellipsoid *arg1 = (circe::Ellipsoid *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(circe::Ellipsoid **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_new_1Meridian_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  circe::Meridian *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (circe::Meridian *)new circe::Meridian();
  *(circe::Meridian **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_new_1Meridian_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  circe::Meridian *arg1 = 0 ;
  circe::Meridian *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Meridian **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "circe::Meridian const & reference is null");
    return 0;
  } 
  result = (circe::Meridian *)new circe::Meridian((circe::Meridian const &)*arg1);
  *(circe::Meridian **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Meridian_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  circe::Meridian *arg1 = (circe::Meridian *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Meridian **)&jarg1; 
  (arg1)->reset();
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Meridian_1setFromGreenwich(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  circe::Meridian *arg1 = (circe::Meridian *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Meridian **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setFromGreenwich(arg2);
}


SWIGEXPORT jdouble JNICALL Java_ign_circe_circeJNI_Meridian_1getFromGreenwich(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  circe::Meridian *arg1 = (circe::Meridian *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Meridian **)&jarg1; 
  result = (double)((circe::Meridian const *)arg1)->getFromGreenwich();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_delete_1Meridian(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  circe::Meridian *arg1 = (circe::Meridian *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(circe::Meridian **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_new_1ReferenceFrame_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  circe::ReferenceFrame *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (circe::ReferenceFrame *)new circe::ReferenceFrame();
  *(circe::ReferenceFrame **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_new_1ReferenceFrame_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  circe::ReferenceFrame *arg1 = 0 ;
  circe::ReferenceFrame *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::ReferenceFrame **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "circe::ReferenceFrame const & reference is null");
    return 0;
  } 
  result = (circe::ReferenceFrame *)new circe::ReferenceFrame((circe::ReferenceFrame const &)*arg1);
  *(circe::ReferenceFrame **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_ReferenceFrame_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  circe::ReferenceFrame *arg1 = (circe::ReferenceFrame *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::ReferenceFrame **)&jarg1; 
  (arg1)->reset();
}


SWIGEXPORT jdouble JNICALL Java_ign_circe_circeJNI_ReferenceFrame_1get_1EpochIni(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  circe::ReferenceFrame *arg1 = (circe::ReferenceFrame *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::ReferenceFrame **)&jarg1; 
  result = (double)(arg1)->get_EpochIni();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_ReferenceFrame_1getUsesForTransformation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  circe::ReferenceFrame *arg1 = (circe::ReferenceFrame *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::ReferenceFrame **)&jarg1; 
  result = ((circe::ReferenceFrame const *)arg1)->getUsesForTransformation();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_ReferenceFrame_1getReferenceSystemId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  circe::ReferenceFrame *arg1 = (circe::ReferenceFrame *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::ReferenceFrame **)&jarg1; 
  result = ((circe::ReferenceFrame const *)arg1)->getReferenceSystemId();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_ReferenceFrame_1setUsesForTransformation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circe::ReferenceFrame *arg1 = (circe::ReferenceFrame *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::ReferenceFrame **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setUsesForTransformation(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_ReferenceFrame_1setReferenceSystem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circe::ReferenceFrame *arg1 = (circe::ReferenceFrame *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::ReferenceFrame **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setReferenceSystem(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_delete_1ReferenceFrame(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  circe::ReferenceFrame *arg1 = (circe::ReferenceFrame *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(circe::ReferenceFrame **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_new_1ReferenceSystem_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  circe::ReferenceSystem *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (circe::ReferenceSystem *)new circe::ReferenceSystem();
  *(circe::ReferenceSystem **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_new_1ReferenceSystem_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  circe::ReferenceSystem *arg1 = 0 ;
  circe::ReferenceSystem *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::ReferenceSystem **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "circe::ReferenceSystem const & reference is null");
    return 0;
  } 
  result = (circe::ReferenceSystem *)new circe::ReferenceSystem((circe::ReferenceSystem const &)*arg1);
  *(circe::ReferenceSystem **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_ReferenceSystem_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  circe::ReferenceSystem *arg1 = (circe::ReferenceSystem *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::ReferenceSystem **)&jarg1; 
  (arg1)->reset();
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_ReferenceSystem_1getSystemDimension(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  circe::ReferenceSystem *arg1 = (circe::ReferenceSystem *) 0 ;
  circe::SYSTEM_DIMENSION result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::ReferenceSystem **)&jarg1; 
  result = (circe::SYSTEM_DIMENSION)((circe::ReferenceSystem const *)arg1)->getSystemDimension();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_ReferenceSystem_1setSystemDimension(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circe::ReferenceSystem *arg1 = (circe::ReferenceSystem *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::ReferenceSystem **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setSystemDimension(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_delete_1ReferenceSystem(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  circe::ReferenceSystem *arg1 = (circe::ReferenceSystem *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(circe::ReferenceSystem **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_new_1GeodeticReferenceSystem_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  circe::GeodeticReferenceSystem *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (circe::GeodeticReferenceSystem *)new circe::GeodeticReferenceSystem();
  *(circe::GeodeticReferenceSystem **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_new_1GeodeticReferenceSystem_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  circe::GeodeticReferenceSystem *arg1 = 0 ;
  circe::GeodeticReferenceSystem *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::GeodeticReferenceSystem **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "circe::GeodeticReferenceSystem const & reference is null");
    return 0;
  } 
  result = (circe::GeodeticReferenceSystem *)new circe::GeodeticReferenceSystem((circe::GeodeticReferenceSystem const &)*arg1);
  *(circe::GeodeticReferenceSystem **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_GeodeticReferenceSystem_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  circe::GeodeticReferenceSystem *arg1 = (circe::GeodeticReferenceSystem *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::GeodeticReferenceSystem **)&jarg1; 
  (arg1)->reset();
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_GeodeticReferenceSystem_1setPrimeMeridianId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circe::GeodeticReferenceSystem *arg1 = (circe::GeodeticReferenceSystem *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::GeodeticReferenceSystem **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setPrimeMeridianId(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_GeodeticReferenceSystem_1setEllipsoidId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circe::GeodeticReferenceSystem *arg1 = (circe::GeodeticReferenceSystem *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::GeodeticReferenceSystem **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setEllipsoidId(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_GeodeticReferenceSystem_1setUsesForTransformation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circe::GeodeticReferenceSystem *arg1 = (circe::GeodeticReferenceSystem *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::GeodeticReferenceSystem **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setUsesForTransformation(arg2);
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_GeodeticReferenceSystem_1getPrimeMeridianId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  circe::GeodeticReferenceSystem *arg1 = (circe::GeodeticReferenceSystem *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::GeodeticReferenceSystem **)&jarg1; 
  result = ((circe::GeodeticReferenceSystem const *)arg1)->getPrimeMeridianId();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_GeodeticReferenceSystem_1getEllipsoidId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  circe::GeodeticReferenceSystem *arg1 = (circe::GeodeticReferenceSystem *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::GeodeticReferenceSystem **)&jarg1; 
  result = ((circe::GeodeticReferenceSystem const *)arg1)->getEllipsoidId();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_GeodeticReferenceSystem_1getUsesForTransformation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  circe::GeodeticReferenceSystem *arg1 = (circe::GeodeticReferenceSystem *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::GeodeticReferenceSystem **)&jarg1; 
  result = ((circe::GeodeticReferenceSystem const *)arg1)->getUsesForTransformation();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_delete_1GeodeticReferenceSystem(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  circe::GeodeticReferenceSystem *arg1 = (circe::GeodeticReferenceSystem *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(circe::GeodeticReferenceSystem **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_new_1GeodeticReferenceFrame_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  circe::GeodeticReferenceFrame *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (circe::GeodeticReferenceFrame *)new circe::GeodeticReferenceFrame();
  *(circe::GeodeticReferenceFrame **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_new_1GeodeticReferenceFrame_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  circe::GeodeticReferenceFrame *arg1 = 0 ;
  circe::GeodeticReferenceFrame *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::GeodeticReferenceFrame **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "circe::GeodeticReferenceFrame const & reference is null");
    return 0;
  } 
  result = (circe::GeodeticReferenceFrame *)new circe::GeodeticReferenceFrame((circe::GeodeticReferenceFrame const &)*arg1);
  *(circe::GeodeticReferenceFrame **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_GeodeticReferenceFrame_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  circe::GeodeticReferenceFrame *arg1 = (circe::GeodeticReferenceFrame *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::GeodeticReferenceFrame **)&jarg1; 
  (arg1)->reset();
}


SWIGEXPORT jdouble JNICALL Java_ign_circe_circeJNI_GeodeticReferenceFrame_1get_1a(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  circe::GeodeticReferenceFrame *arg1 = (circe::GeodeticReferenceFrame *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::GeodeticReferenceFrame **)&jarg1; 
  result = (double)((circe::GeodeticReferenceFrame const *)arg1)->get_a();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_ign_circe_circeJNI_GeodeticReferenceFrame_1get_1b(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  circe::GeodeticReferenceFrame *arg1 = (circe::GeodeticReferenceFrame *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::GeodeticReferenceFrame **)&jarg1; 
  result = (double)((circe::GeodeticReferenceFrame const *)arg1)->get_b();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_ign_circe_circeJNI_GeodeticReferenceFrame_1get_1e2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  circe::GeodeticReferenceFrame *arg1 = (circe::GeodeticReferenceFrame *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::GeodeticReferenceFrame **)&jarg1; 
  result = (double)((circe::GeodeticReferenceFrame const *)arg1)->get_e2();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_GeodeticReferenceFrame_1getEllName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  circe::GeodeticReferenceFrame *arg1 = (circe::GeodeticReferenceFrame *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::GeodeticReferenceFrame **)&jarg1; 
  result = ((circe::GeodeticReferenceFrame const *)arg1)->getEllName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_ign_circe_circeJNI_GeodeticReferenceFrame_1getPrimeMeridianValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  circe::GeodeticReferenceFrame *arg1 = (circe::GeodeticReferenceFrame *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::GeodeticReferenceFrame **)&jarg1; 
  result = (double)((circe::GeodeticReferenceFrame const *)arg1)->getPrimeMeridianValue();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_GeodeticReferenceFrame_1getSystemDimension(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  circe::GeodeticReferenceFrame *arg1 = (circe::GeodeticReferenceFrame *) 0 ;
  circe::SYSTEM_DIMENSION result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::GeodeticReferenceFrame **)&jarg1; 
  result = (circe::SYSTEM_DIMENSION)((circe::GeodeticReferenceFrame const *)arg1)->getSystemDimension();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_GeodeticReferenceFrame_1getGeodeticReferenceSystem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  circe::GeodeticReferenceFrame *arg1 = (circe::GeodeticReferenceFrame *) 0 ;
  circe::GeodeticReferenceSystem *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::GeodeticReferenceFrame **)&jarg1; 
  result = (circe::GeodeticReferenceSystem *)((circe::GeodeticReferenceFrame const *)arg1)->getGeodeticReferenceSystem();
  *(circe::GeodeticReferenceSystem **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_GeodeticReferenceFrame_1getGeographicCRSid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  circe::GeodeticReferenceFrame *arg1 = (circe::GeodeticReferenceFrame *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::GeodeticReferenceFrame **)&jarg1; 
  result = ((circe::GeodeticReferenceFrame const *)arg1)->getGeographicCRSid();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_ign_circe_circeJNI_GeodeticReferenceFrame_1getHasTransformationWithKeyFrame(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  circe::GeodeticReferenceFrame *arg1 = (circe::GeodeticReferenceFrame *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::GeodeticReferenceFrame **)&jarg1; 
  result = (bool)((circe::GeodeticReferenceFrame const *)arg1)->getHasTransformationWithKeyFrame();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_GeodeticReferenceFrame_1set_1a(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  circe::GeodeticReferenceFrame *arg1 = (circe::GeodeticReferenceFrame *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::GeodeticReferenceFrame **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->set_a(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_GeodeticReferenceFrame_1set_1b(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  circe::GeodeticReferenceFrame *arg1 = (circe::GeodeticReferenceFrame *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::GeodeticReferenceFrame **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->set_b(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_GeodeticReferenceFrame_1set_1e2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  circe::GeodeticReferenceFrame *arg1 = (circe::GeodeticReferenceFrame *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::GeodeticReferenceFrame **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->set_e2(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_GeodeticReferenceFrame_1set_1f(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  circe::GeodeticReferenceFrame *arg1 = (circe::GeodeticReferenceFrame *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::GeodeticReferenceFrame **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->set_f(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_GeodeticReferenceFrame_1setEllName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circe::GeodeticReferenceFrame *arg1 = (circe::GeodeticReferenceFrame *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::GeodeticReferenceFrame **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setEllName(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_GeodeticReferenceFrame_1setFromGreenwich(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  circe::GeodeticReferenceFrame *arg1 = (circe::GeodeticReferenceFrame *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::GeodeticReferenceFrame **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setFromGreenwich(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_GeodeticReferenceFrame_1setSystemDimension(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  circe::GeodeticReferenceFrame *arg1 = (circe::GeodeticReferenceFrame *) 0 ;
  circe::SYSTEM_DIMENSION arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::GeodeticReferenceFrame **)&jarg1; 
  arg2 = (circe::SYSTEM_DIMENSION)jarg2; 
  (arg1)->setSystemDimension(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_GeodeticReferenceFrame_1setGeodeticReferenceSystem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  circe::GeodeticReferenceFrame *arg1 = (circe::GeodeticReferenceFrame *) 0 ;
  circe::GeodeticReferenceSystem *arg2 = (circe::GeodeticReferenceSystem *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(circe::GeodeticReferenceFrame **)&jarg1; 
  arg2 = *(circe::GeodeticReferenceSystem **)&jarg2; 
  (arg1)->setGeodeticReferenceSystem(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_GeodeticReferenceFrame_1setGeographicCRSid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circe::GeodeticReferenceFrame *arg1 = (circe::GeodeticReferenceFrame *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::GeodeticReferenceFrame **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setGeographicCRSid(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_GeodeticReferenceFrame_1setHasTransformationWithKeyFrame(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  circe::GeodeticReferenceFrame *arg1 = (circe::GeodeticReferenceFrame *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::GeodeticReferenceFrame **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setHasTransformationWithKeyFrame(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_delete_1GeodeticReferenceFrame(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  circe::GeodeticReferenceFrame *arg1 = (circe::GeodeticReferenceFrame *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(circe::GeodeticReferenceFrame **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_new_1VerticalReferenceSystem_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  circe::VerticalReferenceSystem *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (circe::VerticalReferenceSystem *)new circe::VerticalReferenceSystem();
  *(circe::VerticalReferenceSystem **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_new_1VerticalReferenceSystem_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  circe::VerticalReferenceSystem *arg1 = 0 ;
  circe::VerticalReferenceSystem *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::VerticalReferenceSystem **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "circe::VerticalReferenceSystem const & reference is null");
    return 0;
  } 
  result = (circe::VerticalReferenceSystem *)new circe::VerticalReferenceSystem((circe::VerticalReferenceSystem const &)*arg1);
  *(circe::VerticalReferenceSystem **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_VerticalReferenceSystem_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  circe::VerticalReferenceSystem *arg1 = (circe::VerticalReferenceSystem *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::VerticalReferenceSystem **)&jarg1; 
  (arg1)->reset();
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_VerticalReferenceSystem_1getSystemDimension(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  circe::VerticalReferenceSystem *arg1 = (circe::VerticalReferenceSystem *) 0 ;
  circe::SYSTEM_DIMENSION result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::VerticalReferenceSystem **)&jarg1; 
  result = (circe::SYSTEM_DIMENSION)((circe::VerticalReferenceSystem const *)arg1)->getSystemDimension();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_delete_1VerticalReferenceSystem(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  circe::VerticalReferenceSystem *arg1 = (circe::VerticalReferenceSystem *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(circe::VerticalReferenceSystem **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_new_1VerticalReferenceFrame_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  circe::VerticalReferenceFrame *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (circe::VerticalReferenceFrame *)new circe::VerticalReferenceFrame();
  *(circe::VerticalReferenceFrame **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_new_1VerticalReferenceFrame_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  circe::VerticalReferenceFrame *arg1 = 0 ;
  circe::VerticalReferenceFrame *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::VerticalReferenceFrame **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "circe::VerticalReferenceFrame const & reference is null");
    return 0;
  } 
  result = (circe::VerticalReferenceFrame *)new circe::VerticalReferenceFrame((circe::VerticalReferenceFrame const &)*arg1);
  *(circe::VerticalReferenceFrame **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_VerticalReferenceFrame_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  circe::VerticalReferenceFrame *arg1 = (circe::VerticalReferenceFrame *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::VerticalReferenceFrame **)&jarg1; 
  (arg1)->reset();
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_VerticalReferenceFrame_1getVerticalReferenceSystem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  circe::VerticalReferenceFrame *arg1 = (circe::VerticalReferenceFrame *) 0 ;
  circe::VerticalReferenceSystem *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::VerticalReferenceFrame **)&jarg1; 
  result = (circe::VerticalReferenceSystem *)((circe::VerticalReferenceFrame const *)arg1)->getVerticalReferenceSystem();
  *(circe::VerticalReferenceSystem **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_VerticalReferenceFrame_1setVerticalReferenceSystem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  circe::VerticalReferenceFrame *arg1 = (circe::VerticalReferenceFrame *) 0 ;
  circe::VerticalReferenceSystem *arg2 = (circe::VerticalReferenceSystem *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(circe::VerticalReferenceFrame **)&jarg1; 
  arg2 = *(circe::VerticalReferenceSystem **)&jarg2; 
  (arg1)->setVerticalReferenceSystem(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_delete_1VerticalReferenceFrame(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  circe::VerticalReferenceFrame *arg1 = (circe::VerticalReferenceFrame *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(circe::VerticalReferenceFrame **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_new_1Operation_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  circe::Operation *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (circe::Operation *)new circe::Operation();
  *(circe::Operation **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_new_1Operation_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  circe::Operation *arg1 = 0 ;
  circe::Operation *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Operation **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "circe::Operation const & reference is null");
    return 0;
  } 
  result = (circe::Operation *)new circe::Operation((circe::Operation const &)*arg1);
  *(circe::Operation **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Operation_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  circe::Operation *arg1 = (circe::Operation *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Operation **)&jarg1; 
  (arg1)->reset();
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_Operation_1getOperationApplication(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  circe::Operation *arg1 = (circe::Operation *) 0 ;
  circe::OPERATION_APPLICATION result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Operation **)&jarg1; 
  result = (circe::OPERATION_APPLICATION)((circe::Operation const *)arg1)->getOperationApplication();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_Operation_1getOperationReversibility(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  circe::Operation *arg1 = (circe::Operation *) 0 ;
  circe::OPERATION_APPLICATION result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Operation **)&jarg1; 
  result = (circe::OPERATION_APPLICATION)((circe::Operation const *)arg1)->getOperationReversibility();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_Operation_1getInitParamMethodId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  circe::Operation *arg1 = (circe::Operation *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Operation **)&jarg1; 
  result = (arg1)->getInitParamMethodId();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_Operation_1getStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  circe::Operation *arg1 = (circe::Operation *) 0 ;
  circe::STATUS result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Operation **)&jarg1; 
  result = (circe::STATUS)((circe::Operation const *)arg1)->getStatus();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Operation_1setStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circe::Operation *arg1 = (circe::Operation *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Operation **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setStatus(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Operation_1setReversibility(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circe::Operation *arg1 = (circe::Operation *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Operation **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setReversibility(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Operation_1setOperationApplication_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circe::Operation *arg1 = (circe::Operation *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Operation **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setOperationApplication(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Operation_1setOperationApplication_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  circe::Operation *arg1 = (circe::Operation *) 0 ;
  circe::OPERATION_APPLICATION arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Operation **)&jarg1; 
  arg2 = (circe::OPERATION_APPLICATION)jarg2; 
  (arg1)->setOperationApplication(arg2);
}


SWIGEXPORT jboolean JNICALL Java_ign_circe_circeJNI_Operation_1IsReversible(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  circe::Operation *arg1 = (circe::Operation *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Operation **)&jarg1; 
  result = (bool)(arg1)->IsReversible();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_delete_1Operation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  circe::Operation *arg1 = (circe::Operation *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(circe::Operation **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_LCCTID_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)("PRCM014from2Dto2D");
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_LCCTIB_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)("PRCM012from2Dto2D");
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_LCCSID_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)("PRCM013from2Dto2D");
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_UTMNID_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)("PRCM020from2Dto2D");
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_UTMSID_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)("PRCM030from2Dto2D");
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_GLSBID_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)("GLSBIDfrom2Dto2D");
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_GLSEID_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)("GLSEIDfrom2Dto2D");
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_GLSCID_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)("PRCM053from2Dto2D");
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_LAEAID_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)("PRCM015from2Dto2D");
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_SMCSID_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)("PRCM093from2Dto2D");
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_SPSTID_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)("PRCM094from2Dto2D");
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_SPSSID_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)("PRCM095from2Dto2D");
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_BONNID_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)("PRCM060from2Dto2D");
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_DIMEID_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)("PRCM070from2Dto2D");
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_TRMEID_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)("PRCM040from2Dto2D");
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_new_1Conversion_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  circe::Conversion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (circe::Conversion *)new circe::Conversion();
  *(circe::Conversion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_new_1Conversion_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  circe::Conversion *arg1 = 0 ;
  circe::Conversion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Conversion **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "circe::Conversion const & reference is null");
    return 0;
  } 
  result = (circe::Conversion *)new circe::Conversion((circe::Conversion const &)*arg1);
  *(circe::Conversion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_new_1Conversion_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  circe::Conversion *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  circe::Conversion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Conversion **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "circe::Conversion const & reference is null");
    return 0;
  } 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (circe::Conversion *)new circe::Conversion((circe::Conversion const &)*arg1,arg2,arg3);
  *(circe::Conversion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Conversion_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  circe::Conversion *arg1 = (circe::Conversion *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Conversion **)&jarg1; 
  (arg1)->reset();
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Conversion_1InitParam(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  circe::Conversion *arg1 = (circe::Conversion *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Conversion **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  (&arg4)->assign(arg4_pstr);
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->InitParam(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Conversion_1Apply(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
  circe::Conversion *arg1 = (circe::Conversion *) 0 ;
  double arg2 ;
  double arg3 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  double *arg7 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Conversion **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = *(double **)&jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = *(double **)&jarg6; 
  arg7 = *(double **)&jarg7; 
  (arg1)->Apply(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Conversion_1ApplyInv(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
  circe::Conversion *arg1 = (circe::Conversion *) 0 ;
  double arg2 ;
  double arg3 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  double *arg7 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Conversion **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = *(double **)&jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = *(double **)&jarg6; 
  arg7 = *(double **)&jarg7; 
  (arg1)->ApplyInv(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Conversion_1setInitParamMethodId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circe::Conversion *arg1 = (circe::Conversion *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Conversion **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setInitParamMethodId(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Conversion_1setApplicationMethodId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circe::Conversion *arg1 = (circe::Conversion *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Conversion **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setApplicationMethodId(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Conversion_1setApplicationInvMethodId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circe::Conversion *arg1 = (circe::Conversion *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Conversion **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setApplicationInvMethodId(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Conversion_1set_1a(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  circe::Conversion *arg1 = (circe::Conversion *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Conversion **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->set_a(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Conversion_1set_1e2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  circe::Conversion *arg1 = (circe::Conversion *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Conversion **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->set_e2(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Conversion_1setFromGreenwich(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  circe::Conversion *arg1 = (circe::Conversion *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Conversion **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setFromGreenwich(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Conversion_1setParameter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3, jstring jarg4) {
  circe::Conversion *arg1 = (circe::Conversion *) 0 ;
  std::string arg2 ;
  double arg3 ;
  std::string arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Conversion **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  (&arg4)->assign(arg4_pstr);
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->setParameter(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Conversion_1setPrimeMeridianId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circe::Conversion *arg1 = (circe::Conversion *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Conversion **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setPrimeMeridianId(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Conversion_1setAddFromGreenwich(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  circe::Conversion *arg1 = (circe::Conversion *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Conversion **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setAddFromGreenwich(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Conversion_1setbCalcScaleConv(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  circe::Conversion *arg1 = (circe::Conversion *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Conversion **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setbCalcScaleConv(arg2);
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_Conversion_1getInitParamMethodId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  circe::Conversion *arg1 = (circe::Conversion *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Conversion **)&jarg1; 
  result = ((circe::Conversion const *)arg1)->getInitParamMethodId();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_Conversion_1getApplicationMethodId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  circe::Conversion *arg1 = (circe::Conversion *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Conversion **)&jarg1; 
  result = ((circe::Conversion const *)arg1)->getApplicationMethodId();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_Conversion_1getApplicationInvMethodId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  circe::Conversion *arg1 = (circe::Conversion *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Conversion **)&jarg1; 
  result = ((circe::Conversion const *)arg1)->getApplicationInvMethodId();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_ign_circe_circeJNI_Conversion_1get_1a(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  circe::Conversion *arg1 = (circe::Conversion *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Conversion **)&jarg1; 
  result = (double)((circe::Conversion const *)arg1)->get_a();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_ign_circe_circeJNI_Conversion_1get_1e2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  circe::Conversion *arg1 = (circe::Conversion *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Conversion **)&jarg1; 
  result = (double)((circe::Conversion const *)arg1)->get_e2();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_ign_circe_circeJNI_Conversion_1getFromGreenwich(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  circe::Conversion *arg1 = (circe::Conversion *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Conversion **)&jarg1; 
  result = (double)((circe::Conversion const *)arg1)->getFromGreenwich();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_Conversion_1getPrimeMeridianId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  circe::Conversion *arg1 = (circe::Conversion *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Conversion **)&jarg1; 
  result = ((circe::Conversion const *)arg1)->getPrimeMeridianId();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_ign_circe_circeJNI_Conversion_1getAddFromGreenwich(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  circe::Conversion *arg1 = (circe::Conversion *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Conversion **)&jarg1; 
  result = (bool)((circe::Conversion const *)arg1)->getAddFromGreenwich();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_ign_circe_circeJNI_Conversion_1getbCalcScaleConv(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  circe::Conversion *arg1 = (circe::Conversion *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Conversion **)&jarg1; 
  result = (bool)((circe::Conversion const *)arg1)->getbCalcScaleConv();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_delete_1Conversion(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  circe::Conversion *arg1 = (circe::Conversion *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(circe::Conversion **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_new_1ProjectionLCC_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  circe::ProjectionLCC *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (circe::ProjectionLCC *)new circe::ProjectionLCC();
  *(circe::ProjectionLCC **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_new_1ProjectionLCC_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  circe::Conversion *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  circe::ProjectionLCC *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Conversion **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "circe::Conversion const & reference is null");
    return 0;
  } 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (circe::ProjectionLCC *)new circe::ProjectionLCC((circe::Conversion const &)*arg1,arg2,arg3);
  *(circe::ProjectionLCC **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_new_1ProjectionLCC_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  circe::ProjectionLCC *arg1 = 0 ;
  circe::ProjectionLCC *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::ProjectionLCC **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "circe::ProjectionLCC const & reference is null");
    return 0;
  } 
  result = (circe::ProjectionLCC *)new circe::ProjectionLCC((circe::ProjectionLCC const &)*arg1);
  *(circe::ProjectionLCC **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_ProjectionLCC_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  circe::ProjectionLCC *arg1 = (circe::ProjectionLCC *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::ProjectionLCC **)&jarg1; 
  (arg1)->reset();
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_ProjectionLCC_1InitParam(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  circe::ProjectionLCC *arg1 = (circe::ProjectionLCC *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::ProjectionLCC **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  (&arg4)->assign(arg4_pstr);
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->InitParam(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_ProjectionLCC_1Apply(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
  circe::ProjectionLCC *arg1 = (circe::ProjectionLCC *) 0 ;
  double arg2 ;
  double arg3 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  double *arg7 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::ProjectionLCC **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = *(double **)&jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = *(double **)&jarg6; 
  arg7 = *(double **)&jarg7; 
  (arg1)->Apply(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_ProjectionLCC_1ApplyInv(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
  circe::ProjectionLCC *arg1 = (circe::ProjectionLCC *) 0 ;
  double arg2 ;
  double arg3 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  double *arg7 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::ProjectionLCC **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = *(double **)&jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = *(double **)&jarg6; 
  arg7 = *(double **)&jarg7; 
  (arg1)->ApplyInv(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_delete_1ProjectionLCC(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  circe::ProjectionLCC *arg1 = (circe::ProjectionLCC *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(circe::ProjectionLCC **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_new_1ProjectionTMerc_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  circe::ProjectionTMerc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (circe::ProjectionTMerc *)new circe::ProjectionTMerc();
  *(circe::ProjectionTMerc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_new_1ProjectionTMerc_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  circe::Conversion *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  circe::ProjectionTMerc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Conversion **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "circe::Conversion const & reference is null");
    return 0;
  } 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (circe::ProjectionTMerc *)new circe::ProjectionTMerc((circe::Conversion const &)*arg1,arg2,arg3);
  *(circe::ProjectionTMerc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_new_1ProjectionTMerc_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  circe::ProjectionTMerc *arg1 = 0 ;
  circe::ProjectionTMerc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::ProjectionTMerc **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "circe::ProjectionTMerc const & reference is null");
    return 0;
  } 
  result = (circe::ProjectionTMerc *)new circe::ProjectionTMerc((circe::ProjectionTMerc const &)*arg1);
  *(circe::ProjectionTMerc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_ProjectionTMerc_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  circe::ProjectionTMerc *arg1 = (circe::ProjectionTMerc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::ProjectionTMerc **)&jarg1; 
  (arg1)->reset();
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_ProjectionTMerc_1InitParam(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  circe::ProjectionTMerc *arg1 = (circe::ProjectionTMerc *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::ProjectionTMerc **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  (&arg4)->assign(arg4_pstr);
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->InitParam(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_ProjectionTMerc_1Apply(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
  circe::ProjectionTMerc *arg1 = (circe::ProjectionTMerc *) 0 ;
  double arg2 ;
  double arg3 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  double *arg7 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::ProjectionTMerc **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = *(double **)&jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = *(double **)&jarg6; 
  arg7 = *(double **)&jarg7; 
  (arg1)->Apply(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_ProjectionTMerc_1ApplyInv(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
  circe::ProjectionTMerc *arg1 = (circe::ProjectionTMerc *) 0 ;
  double arg2 ;
  double arg3 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  double *arg7 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::ProjectionTMerc **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = *(double **)&jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = *(double **)&jarg6; 
  arg7 = *(double **)&jarg7; 
  (arg1)->ApplyInv(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_delete_1ProjectionTMerc(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  circe::ProjectionTMerc *arg1 = (circe::ProjectionTMerc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(circe::ProjectionTMerc **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_new_1ProjectionGLab_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  circe::ProjectionGLab *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (circe::ProjectionGLab *)new circe::ProjectionGLab();
  *(circe::ProjectionGLab **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_new_1ProjectionGLab_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  circe::Conversion *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  circe::ProjectionGLab *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Conversion **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "circe::Conversion const & reference is null");
    return 0;
  } 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (circe::ProjectionGLab *)new circe::ProjectionGLab((circe::Conversion const &)*arg1,arg2,arg3);
  *(circe::ProjectionGLab **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_new_1ProjectionGLab_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  circe::ProjectionGLab *arg1 = 0 ;
  circe::ProjectionGLab *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::ProjectionGLab **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "circe::ProjectionGLab const & reference is null");
    return 0;
  } 
  result = (circe::ProjectionGLab *)new circe::ProjectionGLab((circe::ProjectionGLab const &)*arg1);
  *(circe::ProjectionGLab **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_ProjectionGLab_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  circe::ProjectionGLab *arg1 = (circe::ProjectionGLab *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::ProjectionGLab **)&jarg1; 
  (arg1)->reset();
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_ProjectionGLab_1InitParam(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  circe::ProjectionGLab *arg1 = (circe::ProjectionGLab *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::ProjectionGLab **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  (&arg4)->assign(arg4_pstr);
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->InitParam(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_ProjectionGLab_1Apply(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
  circe::ProjectionGLab *arg1 = (circe::ProjectionGLab *) 0 ;
  double arg2 ;
  double arg3 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  double *arg7 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::ProjectionGLab **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = *(double **)&jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = *(double **)&jarg6; 
  arg7 = *(double **)&jarg7; 
  (arg1)->Apply(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_ProjectionGLab_1ApplyInv(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
  circe::ProjectionGLab *arg1 = (circe::ProjectionGLab *) 0 ;
  double arg2 ;
  double arg3 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  double *arg7 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::ProjectionGLab **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = *(double **)&jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = *(double **)&jarg6; 
  arg7 = *(double **)&jarg7; 
  (arg1)->ApplyInv(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_delete_1ProjectionGLab(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  circe::ProjectionGLab *arg1 = (circe::ProjectionGLab *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(circe::ProjectionGLab **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_new_1ProjectionLAEA_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  circe::ProjectionLAEA *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (circe::ProjectionLAEA *)new circe::ProjectionLAEA();
  *(circe::ProjectionLAEA **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_new_1ProjectionLAEA_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  circe::Conversion *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  circe::ProjectionLAEA *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Conversion **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "circe::Conversion const & reference is null");
    return 0;
  } 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (circe::ProjectionLAEA *)new circe::ProjectionLAEA((circe::Conversion const &)*arg1,arg2,arg3);
  *(circe::ProjectionLAEA **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_new_1ProjectionLAEA_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  circe::ProjectionLAEA *arg1 = 0 ;
  circe::ProjectionLAEA *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::ProjectionLAEA **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "circe::ProjectionLAEA const & reference is null");
    return 0;
  } 
  result = (circe::ProjectionLAEA *)new circe::ProjectionLAEA((circe::ProjectionLAEA const &)*arg1);
  *(circe::ProjectionLAEA **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_ProjectionLAEA_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  circe::ProjectionLAEA *arg1 = (circe::ProjectionLAEA *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::ProjectionLAEA **)&jarg1; 
  (arg1)->reset();
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_ProjectionLAEA_1InitParam(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  circe::ProjectionLAEA *arg1 = (circe::ProjectionLAEA *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::ProjectionLAEA **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  (&arg4)->assign(arg4_pstr);
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->InitParam(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_ProjectionLAEA_1Apply(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
  circe::ProjectionLAEA *arg1 = (circe::ProjectionLAEA *) 0 ;
  double arg2 ;
  double arg3 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  double *arg7 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::ProjectionLAEA **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = *(double **)&jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = *(double **)&jarg6; 
  arg7 = *(double **)&jarg7; 
  (arg1)->Apply(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_ProjectionLAEA_1ApplyInv(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
  circe::ProjectionLAEA *arg1 = (circe::ProjectionLAEA *) 0 ;
  double arg2 ;
  double arg3 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  double *arg7 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::ProjectionLAEA **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = *(double **)&jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = *(double **)&jarg6; 
  arg7 = *(double **)&jarg7; 
  (arg1)->ApplyInv(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_delete_1ProjectionLAEA(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  circe::ProjectionLAEA *arg1 = (circe::ProjectionLAEA *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(circe::ProjectionLAEA **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_new_1ProjectionSouthPolarStereographic_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  circe::ProjectionSouthPolarStereographic *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (circe::ProjectionSouthPolarStereographic *)new circe::ProjectionSouthPolarStereographic();
  *(circe::ProjectionSouthPolarStereographic **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_new_1ProjectionSouthPolarStereographic_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  circe::Conversion *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  circe::ProjectionSouthPolarStereographic *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Conversion **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "circe::Conversion const & reference is null");
    return 0;
  } 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  result = (circe::ProjectionSouthPolarStereographic *)new circe::ProjectionSouthPolarStereographic((circe::Conversion const &)*arg1,arg2,arg3);
  *(circe::ProjectionSouthPolarStereographic **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_new_1ProjectionSouthPolarStereographic_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  circe::ProjectionSouthPolarStereographic *arg1 = 0 ;
  circe::ProjectionSouthPolarStereographic *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::ProjectionSouthPolarStereographic **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "circe::ProjectionSouthPolarStereographic const & reference is null");
    return 0;
  } 
  result = (circe::ProjectionSouthPolarStereographic *)new circe::ProjectionSouthPolarStereographic((circe::ProjectionSouthPolarStereographic const &)*arg1);
  *(circe::ProjectionSouthPolarStereographic **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_ProjectionSouthPolarStereographic_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  circe::ProjectionSouthPolarStereographic *arg1 = (circe::ProjectionSouthPolarStereographic *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::ProjectionSouthPolarStereographic **)&jarg1; 
  (arg1)->reset();
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_ProjectionSouthPolarStereographic_1InitParam(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  circe::ProjectionSouthPolarStereographic *arg1 = (circe::ProjectionSouthPolarStereographic *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::ProjectionSouthPolarStereographic **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  (&arg4)->assign(arg4_pstr);
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->InitParam(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_ProjectionSouthPolarStereographic_1Apply(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
  circe::ProjectionSouthPolarStereographic *arg1 = (circe::ProjectionSouthPolarStereographic *) 0 ;
  double arg2 ;
  double arg3 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  double *arg7 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::ProjectionSouthPolarStereographic **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = *(double **)&jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = *(double **)&jarg6; 
  arg7 = *(double **)&jarg7; 
  (arg1)->Apply(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_ProjectionSouthPolarStereographic_1ApplyInv(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
  circe::ProjectionSouthPolarStereographic *arg1 = (circe::ProjectionSouthPolarStereographic *) 0 ;
  double arg2 ;
  double arg3 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  double *arg7 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::ProjectionSouthPolarStereographic **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = *(double **)&jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = *(double **)&jarg6; 
  arg7 = *(double **)&jarg7; 
  (arg1)->ApplyInv(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_delete_1ProjectionSouthPolarStereographic(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  circe::ProjectionSouthPolarStereographic *arg1 = (circe::ProjectionSouthPolarStereographic *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(circe::ProjectionSouthPolarStereographic **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jdouble JNICALL Java_ign_circe_circeJNI_EpsilonGrid_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)(double)circe::EpsilonGrid;
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_CALC_1VERT_1DEFL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)circe::CALC_VERT_DEFL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_TBCKEYW_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)("GRID");
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_VERSION_1BIN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_TransfoLayoutText_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::string *arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::string **)&jarg1; 
  {
    size_t ii;
    std::string *b = (std::string *) circe::TransfoLayoutText;
    for (ii = 0; ii < (size_t)circe::L_COUNT; ii++) b[ii] = *((std::string *) arg1 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_TransfoLayoutText_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *)(std::string *)circe::TransfoLayoutText;
  *(std::string **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_ListeExtensionTypeGrille_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::string *arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::string **)&jarg1; 
  {
    size_t ii;
    std::string *b = (std::string *) circe::ListeExtensionTypeGrille;
    for (ii = 0; ii < (size_t)circe::GF_COUNT; ii++) b[ii] = *((std::string *) arg1 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_ListeExtensionTypeGrille_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *)(std::string *)circe::ListeExtensionTypeGrille;
  *(std::string **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_ValueTypeText_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::string *arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::string **)&jarg1; 
  {
    size_t ii;
    std::string *b = (std::string *) circe::ValueTypeText;
    for (ii = 0; ii < (size_t)circe::V_COUNT; ii++) b[ii] = *((std::string *) arg1 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_ValueTypeText_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *)(std::string *)circe::ValueTypeText;
  *(std::string **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_ValueProcessingText_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::string *arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::string **)&jarg1; 
  {
    size_t ii;
    std::string *b = (std::string *) circe::ValueProcessingText;
    for (ii = 0; ii < (size_t)circe::P_COUNT; ii++) b[ii] = *((std::string *) arg1 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_ValueProcessingText_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *)(std::string *)circe::ValueProcessingText;
  *(std::string **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_NodeFrameInfoText_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *)(std::string *)circe::NodeFrameInfoText;
  *(std::string **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_ValuesLocationText_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::string *)(std::string *)circe::ValuesLocationText;
  *(std::string **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_new_1Transformation_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  circe::Transformation *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (circe::Transformation *)new circe::Transformation();
  *(circe::Transformation **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_delete_1Transformation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(circe::Transformation **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Transformation_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  (arg1)->reset();
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_new_1Transformation_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  circe::Transformation *arg1 = 0 ;
  circe::Transformation *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "circe::Transformation const & reference is null");
    return 0;
  } 
  result = (circe::Transformation *)new circe::Transformation((circe::Transformation const &)*arg1);
  *(circe::Transformation **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Transformation_1ConversionCode2Precision_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jdouble jarg2, jlong jarg3, jlong jarg4, jdouble jarg5, jdouble jarg6) {
  int arg1 ;
  double arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double arg5 ;
  double arg6 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = *(double **)&jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  circe::Transformation::ConversionCode2Precision(arg1,arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT jdouble JNICALL Java_ign_circe_circeJNI_Transformation_1ConversionCode2Precision_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jdouble jresult = 0 ;
  int arg1 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (double)circe::Transformation::ConversionCode2Precision(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Transformation_1ConversionPrecision2Code_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6) {
  int *arg1 = (int *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  circe::Transformation::ConversionPrecision2Code(arg1,arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_Transformation_1ConversionPrecision2Code_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jint jresult = 0 ;
  double arg1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  result = (int)circe::Transformation::ConversionPrecision2Code(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_Transformation_1ApplyGeodeticTransformation(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jlong jarg7, jlong jarg8, jlong jarg9, jlong jarg10, jlong jarg11, jlong jarg12, jlong jarg13, jlong jarg14, jint jarg15) {
  jint jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double *arg7 = (double *) 0 ;
  double *arg8 = (double *) 0 ;
  double *arg9 = (double *) 0 ;
  double *arg10 = (double *) 0 ;
  double *arg11 = (double *) 0 ;
  double *arg12 = (double *) 0 ;
  std::vector< circe::Transformation > *arg13 = 0 ;
  int *arg14 = (int *) 0 ;
  int arg15 ;
  circe::OPERATION_MESSAGE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = *(double **)&jarg7; 
  arg8 = *(double **)&jarg8; 
  arg9 = *(double **)&jarg9; 
  arg10 = *(double **)&jarg10; 
  arg11 = *(double **)&jarg11; 
  arg12 = *(double **)&jarg12; 
  arg13 = *(std::vector< circe::Transformation > **)&jarg13;
  if (!arg13) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< circe::Transformation > & reference is null");
    return 0;
  } 
  arg14 = *(int **)&jarg14; 
  arg15 = (int)jarg15; 
  result = (circe::OPERATION_MESSAGE)circe::Transformation::ApplyGeodeticTransformation(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,*arg13,arg14,arg15);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_Transformation_1ApplyVerticalTransformation(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jdouble jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jint jarg7, jlong jarg8, jlong jarg9) {
  jint jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double *arg4 = (double *) 0 ;
  std::vector< circe::Transformation > *arg5 = 0 ;
  int *arg6 = (int *) 0 ;
  int arg7 ;
  std::string *arg8 = (std::string *) 0 ;
  std::string *arg9 = (std::string *) 0 ;
  circe::OPERATION_MESSAGE result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = *(double **)&jarg4; 
  arg5 = *(std::vector< circe::Transformation > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< circe::Transformation > & reference is null");
    return 0;
  } 
  arg6 = *(int **)&jarg6; 
  arg7 = (int)jarg7; 
  arg8 = *(std::string **)&jarg8; 
  arg9 = *(std::string **)&jarg9; 
  result = (circe::OPERATION_MESSAGE)circe::Transformation::ApplyVerticalTransformation(arg1,arg2,arg3,arg4,*arg5,arg6,arg7,arg8,arg9);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_Transformation_1ApplyVerticalTransformation2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jint jarg6) {
  jint jresult = 0 ;
  circe::pt4d *arg1 = (circe::pt4d *) 0 ;
  double arg2 ;
  double *arg3 = (double *) 0 ;
  std::vector< circe::Transformation > *arg4 = 0 ;
  int *arg5 = (int *) 0 ;
  int arg6 ;
  circe::OPERATION_MESSAGE result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::pt4d **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = *(std::vector< circe::Transformation > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< circe::Transformation > & reference is null");
    return 0;
  } 
  arg5 = *(int **)&jarg5; 
  arg6 = (int)jarg6; 
  result = (circe::OPERATION_MESSAGE)circe::Transformation::ApplyVerticalTransformation2(arg1,arg2,arg3,*arg4,arg5,arg6);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_Transformation_1getEncoding(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  circe::ENCODING_TYPE result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  result = (circe::ENCODING_TYPE)((circe::Transformation const *)arg1)->getEncoding();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_Transformation_1getLoadingType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  circe::LOADING_TYPE result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  result = (circe::LOADING_TYPE)((circe::Transformation const *)arg1)->getLoadingType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_Transformation_1getFollowUp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  result = ((circe::Transformation const *)arg1)->getFollowUp();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Transformation_1setEncoding(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setEncoding(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Transformation_1setLoadingType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setLoadingType(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Transformation_1setFollowUp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setFollowUp(arg2);
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_Transformation_1getGridType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  circe::GRID_FORMAT_INFO result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  result = (circe::GRID_FORMAT_INFO)((circe::Transformation const *)arg1)->getGridType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_Transformation_1getGridFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  result = ((circe::Transformation const *)arg1)->getGridFile();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_Transformation_1getMetadadaFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  result = ((circe::Transformation const *)arg1)->getMetadadaFileName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_Transformation_1getOrigin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  result = ((circe::Transformation const *)arg1)->getOrigin();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_Transformation_1getCreated(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  result = ((circe::Transformation const *)arg1)->getCreated();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_Transformation_1getVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  result = ((circe::Transformation const *)arg1)->getVersion();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_Transformation_1getKeyword(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  result = ((circe::Transformation const *)arg1)->getKeyword();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_Transformation_1getDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  result = ((circe::Transformation const *)arg1)->getDescription();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Transformation_1setGridType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setGridType(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Transformation_1setGridFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setGridFile(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Transformation_1setMetadadaFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setMetadadaFileName(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Transformation_1setOrigin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setOrigin(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Transformation_1setCreated(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setCreated(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Transformation_1setVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setVersion(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Transformation_1setKeyword(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setKeyword(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Transformation_1setDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setDescription(arg2);
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_Transformation_1getLayout(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  circe::TRANSFO_LAYOUT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  result = (circe::TRANSFO_LAYOUT)((circe::Transformation const *)arg1)->getLayout();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_Transformation_1getN_1nodes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  result = (int)((circe::Transformation const *)arg1)->getN_nodes();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_Transformation_1getN_1col(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  result = (int)((circe::Transformation const *)arg1)->getN_col();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_Transformation_1getN_1lines(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  result = (int)((circe::Transformation const *)arg1)->getN_lines();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_ign_circe_circeJNI_Transformation_1getWE_1inc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  result = (double)((circe::Transformation const *)arg1)->getWE_inc();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_ign_circe_circeJNI_Transformation_1getSN_1inc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  result = (double)((circe::Transformation const *)arg1)->getSN_inc();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_Transformation_1getNodeCRStype(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  circe::CRS_TYPE result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  result = (circe::CRS_TYPE)((circe::Transformation const *)arg1)->getNodeCRStype();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_Transformation_1getNodeIncCoordUnit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  circe::MEASURE_UNIT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  result = (circe::MEASURE_UNIT)((circe::Transformation const *)arg1)->getNodeIncCoordUnit();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_Transformation_1getIncCoordUnit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  circe::MEASURE_UNIT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  result = (circe::MEASURE_UNIT)((circe::Transformation const *)arg1)->getIncCoordUnit();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_Transformation_1getbNodeCoordWritten(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  result = (int)((circe::Transformation const *)arg1)->getbNodeCoordWritten();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_Transformation_1getbPrecisionCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  result = (int)((circe::Transformation const *)arg1)->getbPrecisionCode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_Transformation_1getbPositiveWest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  result = (int)((circe::Transformation const *)arg1)->getbPositiveWest();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Transformation_1setLayout(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setLayout(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Transformation_1setN_1nodes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setN_nodes(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Transformation_1setN_1col(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setN_col(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Transformation_1setN_1lines(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setN_lines(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Transformation_1setWE_1inc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setWE_inc(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Transformation_1setSN_1inc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setSN_inc(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Transformation_1setNodeCRStype(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setNodeCRStype(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Transformation_1setNodeIncCoordUnit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setNodeIncCoordUnit(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Transformation_1setIncCoordUnit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setIncCoordUnit(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Transformation_1setbNodeCoordWritten(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setbNodeCoordWritten(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Transformation_1setbPrecisionCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setbPrecisionCode(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Transformation_1setbPositiveWest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setbPositiveWest(arg2);
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_Transformation_1getCRStype(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  circe::CRS_TYPE result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  result = (circe::CRS_TYPE)((circe::Transformation const *)arg1)->getCRStype();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_Transformation_1getInitValues(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  std::vector< double > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  result = ((circe::Transformation const *)arg1)->getInitValues();
  *(std::vector< double > **)&jresult = new std::vector< double >((const std::vector< double > &)result); 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_ign_circe_circeJNI_Transformation_1getEpoch(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  result = (double)((circe::Transformation const *)arg1)->getEpoch();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_Transformation_1getPrecisionCodeInit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  result = (int)((circe::Transformation const *)arg1)->getPrecisionCodeInit();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_Transformation_1getbPixelCenter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  result = (int)((circe::Transformation const *)arg1)->getbPixelCenter();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_Transformation_1getbDelimiter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  result = (int)((circe::Transformation const *)arg1)->getbDelimiter();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_Transformation_1getbFinalLineNumber(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  result = (int)((circe::Transformation const *)arg1)->getbFinalLineNumber();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_Transformation_1getValuesNumber(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  result = (int)((circe::Transformation const *)arg1)->getValuesNumber();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_Transformation_1getValueType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  result = (int)((circe::Transformation const *)arg1)->getValueType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_Transformation_1getValueSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  result = (int)((circe::Transformation const *)arg1)->getValueSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_Transformation_1getNodeSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  result = (int)((circe::Transformation const *)arg1)->getNodeSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_ign_circe_circeJNI_Transformation_1getUnknownValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  result = (double)((circe::Transformation const *)arg1)->getUnknownValue();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_Transformation_1getbUnknownValue2zero(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  result = (int)((circe::Transformation const *)arg1)->getbUnknownValue2zero();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_Transformation_1getTranslation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  std::vector< double > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  result = ((circe::Transformation const *)arg1)->getTranslation();
  *(std::vector< double > **)&jresult = new std::vector< double >((const std::vector< double > &)result); 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_ign_circe_circeJNI_Transformation_1getRateFactor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  result = (double)((circe::Transformation const *)arg1)->getRateFactor();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_ign_circe_circeJNI_Transformation_1getMinValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  result = (double)((circe::Transformation const *)arg1)->getMinValue();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_ign_circe_circeJNI_Transformation_1getMaxValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  result = (double)((circe::Transformation const *)arg1)->getMaxValue();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_ign_circe_circeJNI_Transformation_1getMeanValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  result = (double)((circe::Transformation const *)arg1)->getMeanValue();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_Transformation_1getValueUnit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  circe::MEASURE_UNIT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  result = (circe::MEASURE_UNIT)((circe::Transformation const *)arg1)->getValueUnit();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_Transformation_1getInterpolationType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  circe::VALUE_PROCESSING result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  result = (circe::VALUE_PROCESSING)((circe::Transformation const *)arg1)->getInterpolationType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_Transformation_1getInterpolationOrder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  result = (int)((circe::Transformation const *)arg1)->getInterpolationOrder();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Transformation_1ConvertParameters(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  (arg1)->ConvertParameters();
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Transformation_1setCrsType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setCrsType(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Transformation_1setEpoch_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setEpoch(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Transformation_1setEpoch_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setEpoch(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Transformation_1setInitValues(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setInitValues(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Transformation_1setPrecisionCodeInit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setPrecisionCodeInit(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Transformation_1setbPixelCenter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setbPixelCenter(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Transformation_1setbDelimiter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setbDelimiter(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Transformation_1setbFinalLineNumber(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setbFinalLineNumber(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Transformation_1setValuesNumber(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setValuesNumber(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Transformation_1setValueType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setValueType(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Transformation_1setValueSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setValueSize(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Transformation_1setNodeSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setNodeSize(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Transformation_1setUnknownValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setUnknownValue(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Transformation_1setbUnknownValue2zero(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setbUnknownValue2zero(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Transformation_1setTranslation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setTranslation(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Transformation_1setRateFactor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setRateFactor(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Transformation_1setMinValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setMinValue(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Transformation_1setMaxValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setMaxValue(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Transformation_1setMeanValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setMeanValue(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Transformation_1setValueUnit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setValueUnit(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Transformation_1setInterpolationType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setInterpolationType(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Transformation_1setInterpolationOrder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setInterpolationOrder(arg2);
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_Transformation_1getSourceFrameId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  result = ((circe::Transformation const *)arg1)->getSourceFrameId();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_Transformation_1getTargetFrameId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  result = ((circe::Transformation const *)arg1)->getTargetFrameId();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_Transformation_1getNodeFrameId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  result = ((circe::Transformation const *)arg1)->getNodeFrameId();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_Transformation_1getNodeFrameInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  circe::NODE_FRAME_INFO result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  result = (circe::NODE_FRAME_INFO)((circe::Transformation const *)arg1)->getNodeFrameInfo();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_ign_circe_circeJNI_Transformation_1getAf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  result = (double)((circe::Transformation const *)arg1)->getAf();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_ign_circe_circeJNI_Transformation_1getBf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  result = (double)((circe::Transformation const *)arg1)->getBf();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_ign_circe_circeJNI_Transformation_1getE2f(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  result = (double)((circe::Transformation const *)arg1)->getE2f();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_ign_circe_circeJNI_Transformation_1getEpochF(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  result = (double)((circe::Transformation const *)arg1)->getEpochF();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_ign_circe_circeJNI_Transformation_1getAt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  result = (double)((circe::Transformation const *)arg1)->getAt();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_ign_circe_circeJNI_Transformation_1getBt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  result = (double)((circe::Transformation const *)arg1)->getBt();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_ign_circe_circeJNI_Transformation_1getE2t(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  result = (double)((circe::Transformation const *)arg1)->getE2t();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_ign_circe_circeJNI_Transformation_1getEpochT(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  result = (double)((circe::Transformation const *)arg1)->getEpochT();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Transformation_1GetApplicationFrameEpochs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  arg2 = *(double **)&jarg2; 
  arg3 = *(double **)&jarg3; 
  (arg1)->GetApplicationFrameEpochs(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Transformation_1setSourceFrameId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setSourceFrameId(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Transformation_1setTargetFrameId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setTargetFrameId(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Transformation_1setNodeFrameId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setNodeFrameId(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Transformation_1setNodeFrameInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setNodeFrameInfo(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Transformation_1setAf_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setAf(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Transformation_1setBf_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setBf(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Transformation_1setE2f_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setE2f(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Transformation_1setEpochF_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setEpochF(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Transformation_1setAt_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setAt(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Transformation_1setBt_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setBt(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Transformation_1setE2t_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setE2t(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Transformation_1setEpochT_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setEpochT(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Transformation_1setAf_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setAf(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Transformation_1setBf_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setBf(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Transformation_1setE2f_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setE2f(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Transformation_1setEpochF_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setEpochF(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Transformation_1setAt_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setAt(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Transformation_1setBt_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setBt(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Transformation_1setE2t_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setE2t(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Transformation_1setEpochT_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setEpochT(arg2);
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_Transformation_1DisplayMetaData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  result = (arg1)->DisplayMetaData();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_Transformation_1LoadGrid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  circe::LOADING_TYPE arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  arg2 = (circe::LOADING_TYPE)jarg2; 
  result = (int)(arg1)->LoadGrid(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_Transformation_1WriteElement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jint jarg3) {
  jint jresult = 0 ;
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  double arg2 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->WriteElement(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_Transformation_1WriteXML(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  std::string *arg2 = (std::string *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  arg2 = *(std::string **)&jarg2; 
  result = (int)(arg1)->WriteXML(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_Transformation_1ReadXML(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  std::string arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)(arg1)->ReadXML(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_Transformation_1InitGridType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->InitGridType(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_Transformation_1InitAccesElement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jint jresult = 0 ;
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  bool arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (int)(arg1)->InitAccesElement(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_Transformation_1InitVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->InitVector(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_Transformation_1ModifyAndValidateMetaData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jstring jresult = 0 ;
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  bool arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (arg1)->ModifyAndValidateMetaData(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_Transformation_1Interpolate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5, jlong jarg6) {
  jint jresult = 0 ;
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  circe::MEASURE_UNIT arg2 ;
  double arg3 ;
  double arg4 ;
  double *arg5 = (double *) 0 ;
  int *arg6 = (int *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  arg2 = (circe::MEASURE_UNIT)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = *(int **)&jarg6; 
  result = (int)(arg1)->Interpolate(arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Transformation_1toEpoch_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->toEpoch(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_Transformation_1toEpoch_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jlong jarg3) {
  circe::Transformation *arg1 = (circe::Transformation *) 0 ;
  double arg2 ;
  double *arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::Transformation **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = *(double **)&jarg3; 
  (arg1)->toEpoch(arg2,(double const (*))arg3);
  
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_new_1CRS_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  circe::CRS *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (circe::CRS *)new circe::CRS();
  *(circe::CRS **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_new_1CRS_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  circe::CRS *arg1 = 0 ;
  circe::CRS *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::CRS **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "circe::CRS const & reference is null");
    return 0;
  } 
  result = (circe::CRS *)new circe::CRS((circe::CRS const &)*arg1);
  *(circe::CRS **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_CRS_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  circe::CRS *arg1 = (circe::CRS *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::CRS **)&jarg1; 
  (arg1)->reset();
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_CRS_1getCRStype(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  circe::CRS *arg1 = (circe::CRS *) 0 ;
  circe::CRS_TYPE result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::CRS **)&jarg1; 
  result = (circe::CRS_TYPE)((circe::CRS const *)arg1)->getCRStype();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_CRS_1getReferenceFrameId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  circe::CRS *arg1 = (circe::CRS *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::CRS **)&jarg1; 
  result = ((circe::CRS const *)arg1)->getReferenceFrameId();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_CRS_1getBaseGeographicCRSid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  circe::CRS *arg1 = (circe::CRS *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::CRS **)&jarg1; 
  result = ((circe::CRS const *)arg1)->getBaseGeographicCRSid();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_CRS_1getConversionId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  circe::CRS *arg1 = (circe::CRS *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::CRS **)&jarg1; 
  result = ((circe::CRS const *)arg1)->getConversionId();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_CRS_1getReferenceFrame(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  circe::CRS *arg1 = (circe::CRS *) 0 ;
  circe::ReferenceFrame *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::CRS **)&jarg1; 
  result = (circe::ReferenceFrame *)((circe::CRS const *)arg1)->getReferenceFrame();
  *(circe::ReferenceFrame **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_CRS_1getDefiningConversion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  circe::CRS *arg1 = (circe::CRS *) 0 ;
  circe::Conversion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::CRS **)&jarg1; 
  result = (circe::Conversion *)((circe::CRS const *)arg1)->getDefiningConversion();
  *(circe::Conversion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_CRS_1setCRStype(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  circe::CRS *arg1 = (circe::CRS *) 0 ;
  circe::CRS_TYPE arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::CRS **)&jarg1; 
  arg2 = (circe::CRS_TYPE)jarg2; 
  (arg1)->setCRStype(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_CRS_1setReferenceFrameId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circe::CRS *arg1 = (circe::CRS *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::CRS **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setReferenceFrameId(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_CRS_1setBaseGeographicCRSid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circe::CRS *arg1 = (circe::CRS *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::CRS **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setBaseGeographicCRSid(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_CRS_1setConversionId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circe::CRS *arg1 = (circe::CRS *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::CRS **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setConversionId(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_CRS_1setReferenceFrame(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  circe::CRS *arg1 = (circe::CRS *) 0 ;
  circe::ReferenceFrame *arg2 = (circe::ReferenceFrame *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(circe::CRS **)&jarg1; 
  arg2 = *(circe::ReferenceFrame **)&jarg2; 
  (arg1)->setReferenceFrame(arg2);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_CRS_1setDefiningConversion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  circe::CRS *arg1 = (circe::CRS *) 0 ;
  circe::Conversion *arg2 = (circe::Conversion *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(circe::CRS **)&jarg1; 
  arg2 = *(circe::Conversion **)&jarg2; 
  (arg1)->setDefiningConversion(arg2);
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_CRS_1isCRSmatching(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  circe::CRS *arg1 = (circe::CRS *) 0 ;
  std::string arg2 ;
  circe::CRS *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::CRS **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (circe::CRS *)(arg1)->isCRSmatching(arg2);
  *(circe::CRS **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_CRS_1displayDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  circe::CRS *arg1 = (circe::CRS *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::CRS **)&jarg1; 
  result = (arg1)->displayDescription();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_delete_1CRS(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  circe::CRS *arg1 = (circe::CRS *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(circe::CRS **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_geodeticSubset_1geodeticFrameIdList_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  circe::geodeticSubset *arg1 = (circe::geodeticSubset *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(circe::geodeticSubset **)&jarg1; 
  arg2 = *(std::vector< std::string > **)&jarg2; 
  if (arg1) (arg1)->geodeticFrameIdList = *arg2;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_geodeticSubset_1geodeticFrameIdList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  circe::geodeticSubset *arg1 = (circe::geodeticSubset *) 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::geodeticSubset **)&jarg1; 
  result = (std::vector< std::string > *)& ((arg1)->geodeticFrameIdList);
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_geodeticSubset_1geodeticFrameDisplayList_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  circe::geodeticSubset *arg1 = (circe::geodeticSubset *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(circe::geodeticSubset **)&jarg1; 
  arg2 = *(std::vector< std::string > **)&jarg2; 
  if (arg1) (arg1)->geodeticFrameDisplayList = *arg2;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_geodeticSubset_1geodeticFrameDisplayList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  circe::geodeticSubset *arg1 = (circe::geodeticSubset *) 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::geodeticSubset **)&jarg1; 
  result = (std::vector< std::string > *)& ((arg1)->geodeticFrameDisplayList);
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_geodeticSubset_1geodeticCRSidList_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  circe::geodeticSubset *arg1 = (circe::geodeticSubset *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(circe::geodeticSubset **)&jarg1; 
  arg2 = *(std::vector< std::string > **)&jarg2; 
  if (arg1) (arg1)->geodeticCRSidList = *arg2;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_geodeticSubset_1geodeticCRSidList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  circe::geodeticSubset *arg1 = (circe::geodeticSubset *) 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::geodeticSubset **)&jarg1; 
  result = (std::vector< std::string > *)& ((arg1)->geodeticCRSidList);
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_geodeticSubset_1geodeticCRSdisplayList_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  circe::geodeticSubset *arg1 = (circe::geodeticSubset *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(circe::geodeticSubset **)&jarg1; 
  arg2 = *(std::vector< std::string > **)&jarg2; 
  if (arg1) (arg1)->geodeticCRSdisplayList = *arg2;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_geodeticSubset_1geodeticCRSdisplayList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  circe::geodeticSubset *arg1 = (circe::geodeticSubset *) 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::geodeticSubset **)&jarg1; 
  result = (std::vector< std::string > *)& ((arg1)->geodeticCRSdisplayList);
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_geodeticSubset_1verticalFrameIdList_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  circe::geodeticSubset *arg1 = (circe::geodeticSubset *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(circe::geodeticSubset **)&jarg1; 
  arg2 = *(std::vector< std::string > **)&jarg2; 
  if (arg1) (arg1)->verticalFrameIdList = *arg2;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_geodeticSubset_1verticalFrameIdList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  circe::geodeticSubset *arg1 = (circe::geodeticSubset *) 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::geodeticSubset **)&jarg1; 
  result = (std::vector< std::string > *)& ((arg1)->verticalFrameIdList);
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_geodeticSubset_1verticalFrameDisplayList_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  circe::geodeticSubset *arg1 = (circe::geodeticSubset *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(circe::geodeticSubset **)&jarg1; 
  arg2 = *(std::vector< std::string > **)&jarg2; 
  if (arg1) (arg1)->verticalFrameDisplayList = *arg2;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_geodeticSubset_1verticalFrameDisplayList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  circe::geodeticSubset *arg1 = (circe::geodeticSubset *) 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::geodeticSubset **)&jarg1; 
  result = (std::vector< std::string > *)& ((arg1)->verticalFrameDisplayList);
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_geodeticSubset_1dataFileFormatList_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  circe::geodeticSubset *arg1 = (circe::geodeticSubset *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(circe::geodeticSubset **)&jarg1; 
  arg2 = *(std::vector< std::string > **)&jarg2; 
  if (arg1) (arg1)->dataFileFormatList = *arg2;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_geodeticSubset_1dataFileFormatList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  circe::geodeticSubset *arg1 = (circe::geodeticSubset *) 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::geodeticSubset **)&jarg1; 
  result = (std::vector< std::string > *)& ((arg1)->dataFileFormatList);
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_geodeticSubset_1dataFileFormatDisplayList_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  circe::geodeticSubset *arg1 = (circe::geodeticSubset *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(circe::geodeticSubset **)&jarg1; 
  arg2 = *(std::vector< std::string > **)&jarg2; 
  if (arg1) (arg1)->dataFileFormatDisplayList = *arg2;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_geodeticSubset_1dataFileFormatDisplayList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  circe::geodeticSubset *arg1 = (circe::geodeticSubset *) 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::geodeticSubset **)&jarg1; 
  result = (std::vector< std::string > *)& ((arg1)->dataFileFormatDisplayList);
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_geodeticSubset_1dataPointFormatList_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  circe::geodeticSubset *arg1 = (circe::geodeticSubset *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(circe::geodeticSubset **)&jarg1; 
  arg2 = *(std::vector< std::string > **)&jarg2; 
  if (arg1) (arg1)->dataPointFormatList = *arg2;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_geodeticSubset_1dataPointFormatList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  circe::geodeticSubset *arg1 = (circe::geodeticSubset *) 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::geodeticSubset **)&jarg1; 
  result = (std::vector< std::string > *)& ((arg1)->dataPointFormatList);
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_geodeticSubset_1dataPointFormatDisplayList_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  circe::geodeticSubset *arg1 = (circe::geodeticSubset *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(circe::geodeticSubset **)&jarg1; 
  arg2 = *(std::vector< std::string > **)&jarg2; 
  if (arg1) (arg1)->dataPointFormatDisplayList = *arg2;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_geodeticSubset_1dataPointFormatDisplayList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  circe::geodeticSubset *arg1 = (circe::geodeticSubset *) 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::geodeticSubset **)&jarg1; 
  result = (std::vector< std::string > *)& ((arg1)->dataPointFormatDisplayList);
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_geodeticSubset_1dataUnitList_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  circe::geodeticSubset *arg1 = (circe::geodeticSubset *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(circe::geodeticSubset **)&jarg1; 
  arg2 = *(std::vector< std::string > **)&jarg2; 
  if (arg1) (arg1)->dataUnitList = *arg2;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_geodeticSubset_1dataUnitList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  circe::geodeticSubset *arg1 = (circe::geodeticSubset *) 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::geodeticSubset **)&jarg1; 
  result = (std::vector< std::string > *)& ((arg1)->dataUnitList);
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_geodeticSubset_1dataUnitDisplayList_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  circe::geodeticSubset *arg1 = (circe::geodeticSubset *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(circe::geodeticSubset **)&jarg1; 
  arg2 = *(std::vector< std::string > **)&jarg2; 
  if (arg1) (arg1)->dataUnitDisplayList = *arg2;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_geodeticSubset_1dataUnitDisplayList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  circe::geodeticSubset *arg1 = (circe::geodeticSubset *) 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::geodeticSubset **)&jarg1; 
  result = (std::vector< std::string > *)& ((arg1)->dataUnitDisplayList);
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_geodeticSubset_1iGeodeticFrame_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  circe::geodeticSubset *arg1 = (circe::geodeticSubset *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::geodeticSubset **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->iGeodeticFrame = arg2;
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_geodeticSubset_1iGeodeticFrame_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  circe::geodeticSubset *arg1 = (circe::geodeticSubset *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::geodeticSubset **)&jarg1; 
  result = (int) ((arg1)->iGeodeticFrame);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_geodeticSubset_1iGeodeticCRS_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  circe::geodeticSubset *arg1 = (circe::geodeticSubset *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::geodeticSubset **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->iGeodeticCRS = arg2;
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_geodeticSubset_1iGeodeticCRS_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  circe::geodeticSubset *arg1 = (circe::geodeticSubset *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::geodeticSubset **)&jarg1; 
  result = (int) ((arg1)->iGeodeticCRS);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_geodeticSubset_1iVerticalFrame_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  circe::geodeticSubset *arg1 = (circe::geodeticSubset *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::geodeticSubset **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->iVerticalFrame = arg2;
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_geodeticSubset_1iVerticalFrame_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  circe::geodeticSubset *arg1 = (circe::geodeticSubset *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::geodeticSubset **)&jarg1; 
  result = (int) ((arg1)->iVerticalFrame);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_geodeticSubset_1iDataFileFormat_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  circe::geodeticSubset *arg1 = (circe::geodeticSubset *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::geodeticSubset **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->iDataFileFormat = arg2;
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_geodeticSubset_1iDataFileFormat_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  circe::geodeticSubset *arg1 = (circe::geodeticSubset *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::geodeticSubset **)&jarg1; 
  result = (int) ((arg1)->iDataFileFormat);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_geodeticSubset_1iDataPointFormat_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  circe::geodeticSubset *arg1 = (circe::geodeticSubset *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::geodeticSubset **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->iDataPointFormat = arg2;
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_geodeticSubset_1iDataPointFormat_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  circe::geodeticSubset *arg1 = (circe::geodeticSubset *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::geodeticSubset **)&jarg1; 
  result = (int) ((arg1)->iDataPointFormat);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_geodeticSubset_1iDataUnit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  circe::geodeticSubset *arg1 = (circe::geodeticSubset *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::geodeticSubset **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->iDataUnit = arg2;
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_geodeticSubset_1iDataUnit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  circe::geodeticSubset *arg1 = (circe::geodeticSubset *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::geodeticSubset **)&jarg1; 
  result = (int) ((arg1)->iDataUnit);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_geodeticSubset_1geodeticDimension_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  circe::geodeticSubset *arg1 = (circe::geodeticSubset *) 0 ;
  circe::SYSTEM_DIMENSION arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::geodeticSubset **)&jarg1; 
  arg2 = (circe::SYSTEM_DIMENSION)jarg2; 
  if (arg1) (arg1)->geodeticDimension = arg2;
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_geodeticSubset_1geodeticDimension_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  circe::geodeticSubset *arg1 = (circe::geodeticSubset *) 0 ;
  circe::SYSTEM_DIMENSION result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::geodeticSubset **)&jarg1; 
  result = (circe::SYSTEM_DIMENSION) ((arg1)->geodeticDimension);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_new_1geodeticSubset(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  circe::geodeticSubset *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (circe::geodeticSubset *)new circe::geodeticSubset();
  *(circe::geodeticSubset **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_delete_1geodeticSubset(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  circe::geodeticSubset *arg1 = (circe::geodeticSubset *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(circe::geodeticSubset **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_operationSubset_1sourceSubset_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  circe::operationSubset *arg1 = (circe::operationSubset *) 0 ;
  circe::geodeticSubset *arg2 = (circe::geodeticSubset *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(circe::operationSubset **)&jarg1; 
  arg2 = *(circe::geodeticSubset **)&jarg2; 
  if (arg1) (arg1)->sourceSubset = *arg2;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_operationSubset_1sourceSubset_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  circe::operationSubset *arg1 = (circe::operationSubset *) 0 ;
  circe::geodeticSubset *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::operationSubset **)&jarg1; 
  result = (circe::geodeticSubset *)& ((arg1)->sourceSubset);
  *(circe::geodeticSubset **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_operationSubset_1targetSubset_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  circe::operationSubset *arg1 = (circe::operationSubset *) 0 ;
  circe::geodeticSubset *arg2 = (circe::geodeticSubset *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(circe::operationSubset **)&jarg1; 
  arg2 = *(circe::geodeticSubset **)&jarg2; 
  if (arg1) (arg1)->targetSubset = *arg2;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_operationSubset_1targetSubset_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  circe::operationSubset *arg1 = (circe::operationSubset *) 0 ;
  circe::geodeticSubset *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::operationSubset **)&jarg1; 
  result = (circe::geodeticSubset *)& ((arg1)->targetSubset);
  *(circe::geodeticSubset **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_operationSubset_1geodeticTransfoIdList_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  circe::operationSubset *arg1 = (circe::operationSubset *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(circe::operationSubset **)&jarg1; 
  arg2 = *(std::vector< std::string > **)&jarg2; 
  if (arg1) (arg1)->geodeticTransfoIdList = *arg2;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_operationSubset_1geodeticTransfoIdList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  circe::operationSubset *arg1 = (circe::operationSubset *) 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::operationSubset **)&jarg1; 
  result = (std::vector< std::string > *)& ((arg1)->geodeticTransfoIdList);
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_operationSubset_1verticalTransfoIdList_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  circe::operationSubset *arg1 = (circe::operationSubset *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(circe::operationSubset **)&jarg1; 
  arg2 = *(std::vector< std::string > **)&jarg2; 
  if (arg1) (arg1)->verticalTransfoIdList = *arg2;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_operationSubset_1verticalTransfoIdList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  circe::operationSubset *arg1 = (circe::operationSubset *) 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::operationSubset **)&jarg1; 
  result = (std::vector< std::string > *)& ((arg1)->verticalTransfoIdList);
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_operationSubset_1geodeticTransfoDisplayList_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  circe::operationSubset *arg1 = (circe::operationSubset *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(circe::operationSubset **)&jarg1; 
  arg2 = *(std::vector< std::string > **)&jarg2; 
  if (arg1) (arg1)->geodeticTransfoDisplayList = *arg2;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_operationSubset_1geodeticTransfoDisplayList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  circe::operationSubset *arg1 = (circe::operationSubset *) 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::operationSubset **)&jarg1; 
  result = (std::vector< std::string > *)& ((arg1)->geodeticTransfoDisplayList);
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_operationSubset_1verticalTransfoDisplayList_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  circe::operationSubset *arg1 = (circe::operationSubset *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(circe::operationSubset **)&jarg1; 
  arg2 = *(std::vector< std::string > **)&jarg2; 
  if (arg1) (arg1)->verticalTransfoDisplayList = *arg2;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_operationSubset_1verticalTransfoDisplayList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  circe::operationSubset *arg1 = (circe::operationSubset *) 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::operationSubset **)&jarg1; 
  result = (std::vector< std::string > *)& ((arg1)->verticalTransfoDisplayList);
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_operationSubset_1iGeodeticTransfo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  circe::operationSubset *arg1 = (circe::operationSubset *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::operationSubset **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->iGeodeticTransfo = arg2;
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_operationSubset_1iGeodeticTransfo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  circe::operationSubset *arg1 = (circe::operationSubset *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::operationSubset **)&jarg1; 
  result = (int) ((arg1)->iGeodeticTransfo);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_operationSubset_1iVerticalTransfo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  circe::operationSubset *arg1 = (circe::operationSubset *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::operationSubset **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->iVerticalTransfo = arg2;
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_operationSubset_1iVerticalTransfo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  circe::operationSubset *arg1 = (circe::operationSubset *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::operationSubset **)&jarg1; 
  result = (int) ((arg1)->iVerticalTransfo);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_new_1operationSubset(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  circe::operationSubset *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (circe::operationSubset *)new circe::operationSubset();
  *(circe::operationSubset **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_delete_1operationSubset(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  circe::operationSubset *arg1 = (circe::operationSubset *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(circe::operationSubset **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_GeodeticSet_1vEllipsoid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  circe::GeodeticSet *arg1 = (circe::GeodeticSet *) 0 ;
  std::vector< circe::Ellipsoid > *arg2 = (std::vector< circe::Ellipsoid > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::GeodeticSet **)&jarg1; 
  arg2 = *(std::vector< circe::Ellipsoid > **)&jarg2; 
  if (arg1) (arg1)->vEllipsoid = *arg2;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_GeodeticSet_1vEllipsoid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  circe::GeodeticSet *arg1 = (circe::GeodeticSet *) 0 ;
  std::vector< circe::Ellipsoid > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::GeodeticSet **)&jarg1; 
  result = (std::vector< circe::Ellipsoid > *)& ((arg1)->vEllipsoid);
  *(std::vector< circe::Ellipsoid > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_GeodeticSet_1vMeridian_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  circe::GeodeticSet *arg1 = (circe::GeodeticSet *) 0 ;
  std::vector< circe::Meridian > *arg2 = (std::vector< circe::Meridian > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::GeodeticSet **)&jarg1; 
  arg2 = *(std::vector< circe::Meridian > **)&jarg2; 
  if (arg1) (arg1)->vMeridian = *arg2;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_GeodeticSet_1vMeridian_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  circe::GeodeticSet *arg1 = (circe::GeodeticSet *) 0 ;
  std::vector< circe::Meridian > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::GeodeticSet **)&jarg1; 
  result = (std::vector< circe::Meridian > *)& ((arg1)->vMeridian);
  *(std::vector< circe::Meridian > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_GeodeticSet_1vGeodeticFrame_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  circe::GeodeticSet *arg1 = (circe::GeodeticSet *) 0 ;
  std::vector< circe::GeodeticReferenceFrame > *arg2 = (std::vector< circe::GeodeticReferenceFrame > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::GeodeticSet **)&jarg1; 
  arg2 = *(std::vector< circe::GeodeticReferenceFrame > **)&jarg2; 
  if (arg1) (arg1)->vGeodeticFrame = *arg2;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_GeodeticSet_1vGeodeticFrame_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  circe::GeodeticSet *arg1 = (circe::GeodeticSet *) 0 ;
  std::vector< circe::GeodeticReferenceFrame > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::GeodeticSet **)&jarg1; 
  result = (std::vector< circe::GeodeticReferenceFrame > *)& ((arg1)->vGeodeticFrame);
  *(std::vector< circe::GeodeticReferenceFrame > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_GeodeticSet_1vVerticalFrame_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  circe::GeodeticSet *arg1 = (circe::GeodeticSet *) 0 ;
  std::vector< circe::VerticalReferenceFrame > *arg2 = (std::vector< circe::VerticalReferenceFrame > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::GeodeticSet **)&jarg1; 
  arg2 = *(std::vector< circe::VerticalReferenceFrame > **)&jarg2; 
  if (arg1) (arg1)->vVerticalFrame = *arg2;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_GeodeticSet_1vVerticalFrame_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  circe::GeodeticSet *arg1 = (circe::GeodeticSet *) 0 ;
  std::vector< circe::VerticalReferenceFrame > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::GeodeticSet **)&jarg1; 
  result = (std::vector< circe::VerticalReferenceFrame > *)& ((arg1)->vVerticalFrame);
  *(std::vector< circe::VerticalReferenceFrame > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_GeodeticSet_1vGeodeticSystem_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  circe::GeodeticSet *arg1 = (circe::GeodeticSet *) 0 ;
  std::vector< circe::GeodeticReferenceSystem > *arg2 = (std::vector< circe::GeodeticReferenceSystem > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::GeodeticSet **)&jarg1; 
  arg2 = *(std::vector< circe::GeodeticReferenceSystem > **)&jarg2; 
  if (arg1) (arg1)->vGeodeticSystem = *arg2;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_GeodeticSet_1vGeodeticSystem_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  circe::GeodeticSet *arg1 = (circe::GeodeticSet *) 0 ;
  std::vector< circe::GeodeticReferenceSystem > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::GeodeticSet **)&jarg1; 
  result = (std::vector< circe::GeodeticReferenceSystem > *)& ((arg1)->vGeodeticSystem);
  *(std::vector< circe::GeodeticReferenceSystem > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_GeodeticSet_1vVerticalSystem_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  circe::GeodeticSet *arg1 = (circe::GeodeticSet *) 0 ;
  std::vector< circe::VerticalReferenceSystem > *arg2 = (std::vector< circe::VerticalReferenceSystem > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::GeodeticSet **)&jarg1; 
  arg2 = *(std::vector< circe::VerticalReferenceSystem > **)&jarg2; 
  if (arg1) (arg1)->vVerticalSystem = *arg2;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_GeodeticSet_1vVerticalSystem_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  circe::GeodeticSet *arg1 = (circe::GeodeticSet *) 0 ;
  std::vector< circe::VerticalReferenceSystem > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::GeodeticSet **)&jarg1; 
  result = (std::vector< circe::VerticalReferenceSystem > *)& ((arg1)->vVerticalSystem);
  *(std::vector< circe::VerticalReferenceSystem > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_GeodeticSet_1vGeodeticTransfo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  circe::GeodeticSet *arg1 = (circe::GeodeticSet *) 0 ;
  std::vector< circe::Transformation > *arg2 = (std::vector< circe::Transformation > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::GeodeticSet **)&jarg1; 
  arg2 = *(std::vector< circe::Transformation > **)&jarg2; 
  if (arg1) (arg1)->vGeodeticTransfo = *arg2;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_GeodeticSet_1vGeodeticTransfo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  circe::GeodeticSet *arg1 = (circe::GeodeticSet *) 0 ;
  std::vector< circe::Transformation > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::GeodeticSet **)&jarg1; 
  result = (std::vector< circe::Transformation > *)& ((arg1)->vGeodeticTransfo);
  *(std::vector< circe::Transformation > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_GeodeticSet_1vVerticalTransfo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  circe::GeodeticSet *arg1 = (circe::GeodeticSet *) 0 ;
  std::vector< circe::Transformation > *arg2 = (std::vector< circe::Transformation > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::GeodeticSet **)&jarg1; 
  arg2 = *(std::vector< circe::Transformation > **)&jarg2; 
  if (arg1) (arg1)->vVerticalTransfo = *arg2;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_GeodeticSet_1vVerticalTransfo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  circe::GeodeticSet *arg1 = (circe::GeodeticSet *) 0 ;
  std::vector< circe::Transformation > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::GeodeticSet **)&jarg1; 
  result = (std::vector< circe::Transformation > *)& ((arg1)->vVerticalTransfo);
  *(std::vector< circe::Transformation > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_GeodeticSet_1vConversion_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  circe::GeodeticSet *arg1 = (circe::GeodeticSet *) 0 ;
  std::vector< circe::Conversion > *arg2 = (std::vector< circe::Conversion > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::GeodeticSet **)&jarg1; 
  arg2 = *(std::vector< circe::Conversion > **)&jarg2; 
  if (arg1) (arg1)->vConversion = *arg2;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_GeodeticSet_1vConversion_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  circe::GeodeticSet *arg1 = (circe::GeodeticSet *) 0 ;
  std::vector< circe::Conversion > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::GeodeticSet **)&jarg1; 
  result = (std::vector< circe::Conversion > *)& ((arg1)->vConversion);
  *(std::vector< circe::Conversion > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_GeodeticSet_1vCRS_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  circe::GeodeticSet *arg1 = (circe::GeodeticSet *) 0 ;
  std::vector< circe::CRS > *arg2 = (std::vector< circe::CRS > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::GeodeticSet **)&jarg1; 
  arg2 = *(std::vector< circe::CRS > **)&jarg2; 
  if (arg1) (arg1)->vCRS = *arg2;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_GeodeticSet_1vCRS_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  circe::GeodeticSet *arg1 = (circe::GeodeticSet *) 0 ;
  std::vector< circe::CRS > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::GeodeticSet **)&jarg1; 
  result = (std::vector< circe::CRS > *)& ((arg1)->vCRS);
  *(std::vector< circe::CRS > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_GeodeticSet_1metadataPath_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circe::GeodeticSet *arg1 = (circe::GeodeticSet *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::GeodeticSet **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->metadataPath = *arg2;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_GeodeticSet_1metadataPath_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  circe::GeodeticSet *arg1 = (circe::GeodeticSet *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::GeodeticSet **)&jarg1; 
  result = (std::string *) & ((arg1)->metadataPath);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_new_1GeodeticSet(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  circe::GeodeticSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (circe::GeodeticSet *)new circe::GeodeticSet();
  *(circe::GeodeticSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_GeodeticSet_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  circe::GeodeticSet *arg1 = (circe::GeodeticSet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::GeodeticSet **)&jarg1; 
  (arg1)->reset();
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_GeodeticSet_1getGeodeticReferenceFrame(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  circe::GeodeticSet *arg1 = (circe::GeodeticSet *) 0 ;
  std::string arg2 ;
  circe::GeodeticReferenceFrame *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::GeodeticSet **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (circe::GeodeticReferenceFrame *)(arg1)->getGeodeticReferenceFrame(arg2);
  *(circe::GeodeticReferenceFrame **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_GeodeticSet_1getCRS(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  circe::GeodeticSet *arg1 = (circe::GeodeticSet *) 0 ;
  std::string arg2 ;
  circe::CRS *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::GeodeticSet **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (circe::CRS *)(arg1)->getCRS(arg2);
  *(circe::CRS **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_GeodeticSet_1getVerticalReferenceFrameName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  circe::GeodeticSet *arg1 = (circe::GeodeticSet *) 0 ;
  std::string arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::GeodeticSet **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (arg1)->getVerticalReferenceFrameName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_GeodeticSet_1getCRSid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  circe::GeodeticSet *arg1 = (circe::GeodeticSet *) 0 ;
  std::string arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::GeodeticSet **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (arg1)->getCRSid(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_GeodeticSet_1getAuthority(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  jstring jresult = 0 ;
  circe::GeodeticSet *arg1 = (circe::GeodeticSet *) 0 ;
  std::string arg2 ;
  std::string *arg3 = (std::string *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::GeodeticSet **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(std::string **)&jarg3; 
  result = (arg1)->getAuthority(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_GeodeticSet_1displayGeodeticSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  circe::GeodeticSet *arg1 = (circe::GeodeticSet *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::GeodeticSet **)&jarg1; 
  result = (arg1)->displayGeodeticSet();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_GeodeticSet_1displayAll(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jstring jresult = 0 ;
  circe::GeodeticSet *arg1 = (circe::GeodeticSet *) 0 ;
  circe::operationSubset *arg2 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(circe::GeodeticSet **)&jarg1; 
  arg2 = *(circe::operationSubset **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "circe::operationSubset const & reference is null");
    return 0;
  } 
  result = (arg1)->displayAll((circe::operationSubset const &)*arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_GeodeticSet_1CompleteMetadata(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  circe::GeodeticSet *arg1 = (circe::GeodeticSet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::GeodeticSet **)&jarg1; 
  (arg1)->CompleteMetadata();
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_GeodeticSet_1getCRSidList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jstring jresult = 0 ;
  circe::GeodeticSet *arg1 = (circe::GeodeticSet *) 0 ;
  std::string arg2 ;
  circe::circeOptions *arg3 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(circe::GeodeticSet **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(circe::circeOptions **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "circe::circeOptions const & reference is null");
    return 0;
  } 
  result = (arg1)->getCRSidList(arg2,(circe::circeOptions const &)*arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_GeodeticSet_1getValidityArea_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jstring jarg4) {
  jstring jresult = 0 ;
  circe::GeodeticSet *arg1 = (circe::GeodeticSet *) 0 ;
  std::string arg2 ;
  circe::MEASURE_UNIT arg3 ;
  std::string arg4 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::GeodeticSet **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (circe::MEASURE_UNIT)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  (&arg4)->assign(arg4_pstr);
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = (arg1)->getValidityArea(arg2,arg3,arg4);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_GeodeticSet_1getValidityArea_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  circe::GeodeticSet *arg1 = (circe::GeodeticSet *) 0 ;
  circe::MEASURE_UNIT arg2 ;
  std::string arg3 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::GeodeticSet **)&jarg1; 
  arg2 = (circe::MEASURE_UNIT)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (arg1)->getValidityArea(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_ign_circe_circeJNI_GeodeticSet_1isVerticalFrameMatching(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  circe::GeodeticSet *arg1 = (circe::GeodeticSet *) 0 ;
  std::string arg2 ;
  circe::STATUS arg3 ;
  circe::geodeticOptions *arg4 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(circe::GeodeticSet **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (circe::STATUS)jarg3; 
  arg4 = *(circe::geodeticOptions **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "circe::geodeticOptions const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->isVerticalFrameMatching(arg2,arg3,(circe::geodeticOptions const &)*arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_GeodeticSet_1getGeodeticFrameList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jstring jarg5) {
  circe::GeodeticSet *arg1 = (circe::GeodeticSet *) 0 ;
  circe::geodeticSubset *arg2 = (circe::geodeticSubset *) 0 ;
  circe::geodeticOptions *arg3 = 0 ;
  std::string *arg4 = (std::string *) 0 ;
  std::string arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(circe::GeodeticSet **)&jarg1; 
  arg2 = *(circe::geodeticSubset **)&jarg2; 
  arg3 = *(circe::geodeticOptions **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "circe::geodeticOptions const & reference is null");
    return ;
  } 
  arg4 = *(std::string **)&jarg4; 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return ;
  (&arg5)->assign(arg5_pstr);
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  (arg1)->getGeodeticFrameList(arg2,(circe::geodeticOptions const &)*arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_GeodeticSet_1getTargetGeodeticFrameList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jstring jarg5) {
  circe::GeodeticSet *arg1 = (circe::GeodeticSet *) 0 ;
  circe::geodeticSubset *arg2 = (circe::geodeticSubset *) 0 ;
  circe::circeOptions *arg3 = 0 ;
  std::string *arg4 = (std::string *) 0 ;
  std::string arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(circe::GeodeticSet **)&jarg1; 
  arg2 = *(circe::geodeticSubset **)&jarg2; 
  arg3 = *(circe::circeOptions **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "circe::circeOptions const & reference is null");
    return ;
  } 
  arg4 = *(std::string **)&jarg4; 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return ;
  (&arg5)->assign(arg5_pstr);
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  (arg1)->getTargetGeodeticFrameList(arg2,(circe::circeOptions const &)*arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_GeodeticSet_1getGeodeticTransfoList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jstring jarg5) {
  circe::GeodeticSet *arg1 = (circe::GeodeticSet *) 0 ;
  circe::operationSubset *arg2 = (circe::operationSubset *) 0 ;
  circe::circeOptions *arg3 = 0 ;
  std::string *arg4 = (std::string *) 0 ;
  std::string arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(circe::GeodeticSet **)&jarg1; 
  arg2 = *(circe::operationSubset **)&jarg2; 
  arg3 = *(circe::circeOptions **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "circe::circeOptions const & reference is null");
    return ;
  } 
  arg4 = *(std::string **)&jarg4; 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return ;
  (&arg5)->assign(arg5_pstr);
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  (arg1)->getGeodeticTransfoList(arg2,(circe::circeOptions const &)*arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_GeodeticSet_1getGeodeticCRSlist(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jstring jarg5) {
  circe::GeodeticSet *arg1 = (circe::GeodeticSet *) 0 ;
  circe::geodeticSubset *arg2 = (circe::geodeticSubset *) 0 ;
  circe::geodeticOptions *arg3 = 0 ;
  std::string *arg4 = (std::string *) 0 ;
  std::string arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(circe::GeodeticSet **)&jarg1; 
  arg2 = *(circe::geodeticSubset **)&jarg2; 
  arg3 = *(circe::geodeticOptions **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "circe::geodeticOptions const & reference is null");
    return ;
  } 
  arg4 = *(std::string **)&jarg4; 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return ;
  (&arg5)->assign(arg5_pstr);
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  (arg1)->getGeodeticCRSlist(arg2,(circe::geodeticOptions const &)*arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_GeodeticSet_1getSourceVerticalFrameList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jstring jarg5) {
  circe::GeodeticSet *arg1 = (circe::GeodeticSet *) 0 ;
  circe::geodeticSubset *arg2 = (circe::geodeticSubset *) 0 ;
  circe::geodeticOptions *arg3 = 0 ;
  std::string *arg4 = (std::string *) 0 ;
  std::string arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(circe::GeodeticSet **)&jarg1; 
  arg2 = *(circe::geodeticSubset **)&jarg2; 
  arg3 = *(circe::geodeticOptions **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "circe::geodeticOptions const & reference is null");
    return ;
  } 
  arg4 = *(std::string **)&jarg4; 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return ;
  (&arg5)->assign(arg5_pstr);
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  (arg1)->getSourceVerticalFrameList(arg2,(circe::geodeticOptions const &)*arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_GeodeticSet_1getTargetVerticalFrameList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jstring jarg5) {
  circe::GeodeticSet *arg1 = (circe::GeodeticSet *) 0 ;
  circe::geodeticSubset *arg2 = (circe::geodeticSubset *) 0 ;
  circe::circeOptions *arg3 = 0 ;
  std::string *arg4 = (std::string *) 0 ;
  std::string arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(circe::GeodeticSet **)&jarg1; 
  arg2 = *(circe::geodeticSubset **)&jarg2; 
  arg3 = *(circe::circeOptions **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "circe::circeOptions const & reference is null");
    return ;
  } 
  arg4 = *(std::string **)&jarg4; 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return ;
  (&arg5)->assign(arg5_pstr);
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  (arg1)->getTargetVerticalFrameList(arg2,(circe::circeOptions const &)*arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_GeodeticSet_1getVerticalTransfoList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jstring jarg5) {
  circe::GeodeticSet *arg1 = (circe::GeodeticSet *) 0 ;
  circe::operationSubset *arg2 = (circe::operationSubset *) 0 ;
  circe::circeOptions *arg3 = 0 ;
  std::string *arg4 = (std::string *) 0 ;
  std::string arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(circe::GeodeticSet **)&jarg1; 
  arg2 = *(circe::operationSubset **)&jarg2; 
  arg3 = *(circe::circeOptions **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "circe::circeOptions const & reference is null");
    return ;
  } 
  arg4 = *(std::string **)&jarg4; 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return ;
  (&arg5)->assign(arg5_pstr);
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  (arg1)->getVerticalTransfoList(arg2,(circe::circeOptions const &)*arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_GeodeticSet_1getDataFormatList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jint jarg5, jlong jarg6, jobject jarg6_, jint jarg7, jlong jarg8, jstring jarg9) {
  circe::GeodeticSet *arg1 = (circe::GeodeticSet *) 0 ;
  int *arg2 = (int *) 0 ;
  std::vector< std::string > *arg3 = (std::vector< std::string > *) 0 ;
  std::vector< std::string > *arg4 = (std::vector< std::string > *) 0 ;
  circe::SYSTEM_DIMENSION arg5 ;
  circe::geodeticOptions *arg6 = 0 ;
  circe::DATA_MODE arg7 ;
  std::string *arg8 = (std::string *) 0 ;
  std::string arg9 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg6_;
  arg1 = *(circe::GeodeticSet **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  arg3 = *(std::vector< std::string > **)&jarg3; 
  arg4 = *(std::vector< std::string > **)&jarg4; 
  arg5 = (circe::SYSTEM_DIMENSION)jarg5; 
  arg6 = *(circe::geodeticOptions **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "circe::geodeticOptions const & reference is null");
    return ;
  } 
  arg7 = (circe::DATA_MODE)jarg7; 
  arg8 = *(std::string **)&jarg8; 
  if(!jarg9) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg9_pstr = (const char *)jenv->GetStringUTFChars(jarg9, 0); 
  if (!arg9_pstr) return ;
  (&arg9)->assign(arg9_pstr);
  jenv->ReleaseStringUTFChars(jarg9, arg9_pstr); 
  (arg1)->getDataFormatList(arg2,arg3,arg4,arg5,(circe::geodeticOptions const &)*arg6,arg7,arg8,arg9);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_GeodeticSet_1getDataUnitList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jstring jarg6) {
  circe::GeodeticSet *arg1 = (circe::GeodeticSet *) 0 ;
  std::string arg2 ;
  circe::geodeticSubset *arg3 = (circe::geodeticSubset *) 0 ;
  circe::geodeticOptions *arg4 = 0 ;
  std::string *arg5 = (std::string *) 0 ;
  std::string arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(circe::GeodeticSet **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(circe::geodeticSubset **)&jarg3; 
  arg4 = *(circe::geodeticOptions **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "circe::geodeticOptions const & reference is null");
    return ;
  } 
  arg5 = *(std::string **)&jarg5; 
  if(!jarg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg6_pstr = (const char *)jenv->GetStringUTFChars(jarg6, 0); 
  if (!arg6_pstr) return ;
  (&arg6)->assign(arg6_pstr);
  jenv->ReleaseStringUTFChars(jarg6, arg6_pstr); 
  (arg1)->getDataUnitList(arg2,arg3,(circe::geodeticOptions const &)*arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_GeodeticSet_1initGeodeticIds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  circe::GeodeticSet *arg1 = (circe::GeodeticSet *) 0 ;
  circe::geodeticOptions *arg2 = (circe::geodeticOptions *) 0 ;
  circe::geodeticSubset *arg3 = (circe::geodeticSubset *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(circe::GeodeticSet **)&jarg1; 
  arg2 = *(circe::geodeticOptions **)&jarg2; 
  arg3 = *(circe::geodeticSubset **)&jarg3; 
  (arg1)->initGeodeticIds(arg2,arg3);
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_GeodeticSet_1getKeyGeodeticFrame(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  circe::GeodeticSet *arg1 = (circe::GeodeticSet *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::GeodeticSet **)&jarg1; 
  result = ((circe::GeodeticSet const *)arg1)->getKeyGeodeticFrame();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_GeodeticSet_1setKeyGeodeticFrame(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circe::GeodeticSet *arg1 = (circe::GeodeticSet *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::GeodeticSet **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setKeyGeodeticFrame(arg2);
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_GeodeticSet_1displayGeodeticSubset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  circe::geodeticSubset *arg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::geodeticSubset **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "circe::geodeticSubset const & reference is null");
    return 0;
  } 
  result = circe::GeodeticSet::displayGeodeticSubset((circe::geodeticSubset const &)*arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_GeodeticSet_1displayOperationSubset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  circe::operationSubset *arg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::operationSubset **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "circe::operationSubset const & reference is null");
    return 0;
  } 
  result = circe::GeodeticSet::displayOperationSubset((circe::operationSubset const &)*arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_delete_1GeodeticSet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  circe::GeodeticSet *arg1 = (circe::GeodeticSet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(circe::GeodeticSet **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_geodeticOptions_1geodeticFrameId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  geodeticOptions *arg1 = (geodeticOptions *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(geodeticOptions **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->geodeticFrameId = *arg2;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_geodeticOptions_1geodeticFrameId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  geodeticOptions *arg1 = (geodeticOptions *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(geodeticOptions **)&jarg1; 
  result = (std::string *) & ((arg1)->geodeticFrameId);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_geodeticOptions_1geodeticCRSid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  geodeticOptions *arg1 = (geodeticOptions *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(geodeticOptions **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->geodeticCRSid = *arg2;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_geodeticOptions_1geodeticCRSid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  geodeticOptions *arg1 = (geodeticOptions *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(geodeticOptions **)&jarg1; 
  result = (std::string *) & ((arg1)->geodeticCRSid);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_geodeticOptions_1verticalFrameId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  geodeticOptions *arg1 = (geodeticOptions *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(geodeticOptions **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->verticalFrameId = *arg2;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_geodeticOptions_1verticalFrameId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  geodeticOptions *arg1 = (geodeticOptions *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(geodeticOptions **)&jarg1; 
  result = (std::string *) & ((arg1)->verticalFrameId);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_geodeticOptions_1verticalCRSid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  geodeticOptions *arg1 = (geodeticOptions *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(geodeticOptions **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->verticalCRSid = *arg2;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_geodeticOptions_1verticalCRSid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  geodeticOptions *arg1 = (geodeticOptions *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(geodeticOptions **)&jarg1; 
  result = (std::string *) & ((arg1)->verticalCRSid);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_geodeticOptions_1usesForTransformation_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  geodeticOptions *arg1 = (geodeticOptions *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(geodeticOptions **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->usesForTransformation = *arg2;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_geodeticOptions_1usesForTransformation_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  geodeticOptions *arg1 = (geodeticOptions *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(geodeticOptions **)&jarg1; 
  result = (std::string *) & ((arg1)->usesForTransformation);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_geodeticOptions_1formatId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  geodeticOptions *arg1 = (geodeticOptions *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(geodeticOptions **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->formatId = *arg2;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_geodeticOptions_1formatId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  geodeticOptions *arg1 = (geodeticOptions *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(geodeticOptions **)&jarg1; 
  result = (std::string *) & ((arg1)->formatId);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_geodeticOptions_1linearUnit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  geodeticOptions *arg1 = (geodeticOptions *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(geodeticOptions **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->linearUnit = *arg2;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_geodeticOptions_1linearUnit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  geodeticOptions *arg1 = (geodeticOptions *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(geodeticOptions **)&jarg1; 
  result = (std::string *) & ((arg1)->linearUnit);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_geodeticOptions_1angularUnit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  geodeticOptions *arg1 = (geodeticOptions *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(geodeticOptions **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->angularUnit = *arg2;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_geodeticOptions_1angularUnit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  geodeticOptions *arg1 = (geodeticOptions *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(geodeticOptions **)&jarg1; 
  result = (std::string *) & ((arg1)->angularUnit);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_geodeticOptions_1pathname_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  geodeticOptions *arg1 = (geodeticOptions *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(geodeticOptions **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->pathname = *arg2;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_geodeticOptions_1pathname_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  geodeticOptions *arg1 = (geodeticOptions *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(geodeticOptions **)&jarg1; 
  result = (std::string *) & ((arg1)->pathname);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_geodeticOptions_1epoch_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  geodeticOptions *arg1 = (geodeticOptions *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(geodeticOptions **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->epoch = arg2;
}


SWIGEXPORT jdouble JNICALL Java_ign_circe_circeJNI_geodeticOptions_1epoch_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  geodeticOptions *arg1 = (geodeticOptions *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(geodeticOptions **)&jarg1; 
  result = (double) ((arg1)->epoch);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_geodeticOptions_1subformatId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  geodeticOptions *arg1 = (geodeticOptions *) 0 ;
  circe::FILE_FORMAT arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(geodeticOptions **)&jarg1; 
  arg2 = (circe::FILE_FORMAT)jarg2; 
  if (arg1) (arg1)->subformatId = arg2;
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_geodeticOptions_1subformatId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  geodeticOptions *arg1 = (geodeticOptions *) 0 ;
  circe::FILE_FORMAT result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(geodeticOptions **)&jarg1; 
  result = (circe::FILE_FORMAT) ((arg1)->subformatId);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_geodeticOptions_1useGeodeticCRS_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  geodeticOptions *arg1 = (geodeticOptions *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(geodeticOptions **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->useGeodeticCRS = arg2;
}


SWIGEXPORT jboolean JNICALL Java_ign_circe_circeJNI_geodeticOptions_1useGeodeticCRS_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  geodeticOptions *arg1 = (geodeticOptions *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(geodeticOptions **)&jarg1; 
  result = (bool) ((arg1)->useGeodeticCRS);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_geodeticOptions_1useVerticalCRS_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  geodeticOptions *arg1 = (geodeticOptions *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(geodeticOptions **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->useVerticalCRS = arg2;
}


SWIGEXPORT jboolean JNICALL Java_ign_circe_circeJNI_geodeticOptions_1useVerticalCRS_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  geodeticOptions *arg1 = (geodeticOptions *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(geodeticOptions **)&jarg1; 
  result = (bool) ((arg1)->useVerticalCRS);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_geodeticOptions_1verticalFrameAuthoritative_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  geodeticOptions *arg1 = (geodeticOptions *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(geodeticOptions **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->verticalFrameAuthoritative = arg2;
}


SWIGEXPORT jboolean JNICALL Java_ign_circe_circeJNI_geodeticOptions_1verticalFrameAuthoritative_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  geodeticOptions *arg1 = (geodeticOptions *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(geodeticOptions **)&jarg1; 
  result = (bool) ((arg1)->verticalFrameAuthoritative);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_geodeticOptions_1geodeticCRStype_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  geodeticOptions *arg1 = (geodeticOptions *) 0 ;
  circe::CRS_TYPE arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(geodeticOptions **)&jarg1; 
  arg2 = (circe::CRS_TYPE)jarg2; 
  if (arg1) (arg1)->geodeticCRStype = arg2;
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_geodeticOptions_1geodeticCRStype_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  geodeticOptions *arg1 = (geodeticOptions *) 0 ;
  circe::CRS_TYPE result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(geodeticOptions **)&jarg1; 
  result = (circe::CRS_TYPE) ((arg1)->geodeticCRStype);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_new_1geodeticOptions(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  geodeticOptions *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (geodeticOptions *)new geodeticOptions();
  *(geodeticOptions **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_delete_1geodeticOptions(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  geodeticOptions *arg1 = (geodeticOptions *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(geodeticOptions **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_circeOptions_1appTitle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circeOptions *arg1 = (circeOptions *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->appTitle = *arg2;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_circeOptions_1appTitle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  circeOptions *arg1 = (circeOptions *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  result = (std::string *) & ((arg1)->appTitle);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_circeOptions_1appCopyright_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circeOptions *arg1 = (circeOptions *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->appCopyright = *arg2;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_circeOptions_1appCopyright_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  circeOptions *arg1 = (circeOptions *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  result = (std::string *) & ((arg1)->appCopyright);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_circeOptions_1appVersion_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circeOptions *arg1 = (circeOptions *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->appVersion = *arg2;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_circeOptions_1appVersion_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  circeOptions *arg1 = (circeOptions *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  result = (std::string *) & ((arg1)->appVersion);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_circeOptions_1appDescription_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circeOptions *arg1 = (circeOptions *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->appDescription = *arg2;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_circeOptions_1appDescription_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  circeOptions *arg1 = (circeOptions *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  result = (std::string *) & ((arg1)->appDescription);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_circeOptions_1appHelp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circeOptions *arg1 = (circeOptions *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->appHelp = *arg2;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_circeOptions_1appHelp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  circeOptions *arg1 = (circeOptions *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  result = (std::string *) & ((arg1)->appHelp);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_circeOptions_1appStyle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circeOptions *arg1 = (circeOptions *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->appStyle = *arg2;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_circeOptions_1appStyle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  circeOptions *arg1 = (circeOptions *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  result = (std::string *) & ((arg1)->appStyle);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_circeOptions_1appUserManual_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circeOptions *arg1 = (circeOptions *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->appUserManual = *arg2;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_circeOptions_1appUserManual_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  circeOptions *arg1 = (circeOptions *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  result = (std::string *) & ((arg1)->appUserManual);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_circeOptions_1sourceOptions_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  circeOptions *arg1 = (circeOptions *) 0 ;
  geodeticOptions *arg2 = (geodeticOptions *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(circeOptions **)&jarg1; 
  arg2 = *(geodeticOptions **)&jarg2; 
  if (arg1) (arg1)->sourceOptions = *arg2;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_circeOptions_1sourceOptions_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  circeOptions *arg1 = (circeOptions *) 0 ;
  geodeticOptions *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  result = (geodeticOptions *)& ((arg1)->sourceOptions);
  *(geodeticOptions **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_circeOptions_1targetOptions_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  circeOptions *arg1 = (circeOptions *) 0 ;
  geodeticOptions *arg2 = (geodeticOptions *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(circeOptions **)&jarg1; 
  arg2 = *(geodeticOptions **)&jarg2; 
  if (arg1) (arg1)->targetOptions = *arg2;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_circeOptions_1targetOptions_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  circeOptions *arg1 = (circeOptions *) 0 ;
  geodeticOptions *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  result = (geodeticOptions *)& ((arg1)->targetOptions);
  *(geodeticOptions **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_circeOptions_1idGeodeticTransfoRequired_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circeOptions *arg1 = (circeOptions *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->idGeodeticTransfoRequired = *arg2;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_circeOptions_1idGeodeticTransfoRequired_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  circeOptions *arg1 = (circeOptions *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  result = (std::string *) & ((arg1)->idGeodeticTransfoRequired);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_circeOptions_1idVerticalTransfoRequired_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circeOptions *arg1 = (circeOptions *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->idVerticalTransfoRequired = *arg2;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_circeOptions_1idVerticalTransfoRequired_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  circeOptions *arg1 = (circeOptions *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  result = (std::string *) & ((arg1)->idVerticalTransfoRequired);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_circeOptions_1dataMode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  circeOptions *arg1 = (circeOptions *) 0 ;
  circe::DATA_MODE arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  arg2 = (circe::DATA_MODE)jarg2; 
  if (arg1) (arg1)->dataMode = arg2;
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_circeOptions_1dataMode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  circeOptions *arg1 = (circeOptions *) 0 ;
  circe::DATA_MODE result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  result = (circe::DATA_MODE) ((arg1)->dataMode);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_circeOptions_1metadataFile_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circeOptions *arg1 = (circeOptions *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->metadataFile = *arg2;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_circeOptions_1metadataFile_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  circeOptions *arg1 = (circeOptions *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  result = (std::string *) & ((arg1)->metadataFile);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_circeOptions_1gridLoading_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circeOptions *arg1 = (circeOptions *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->gridLoading = *arg2;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_circeOptions_1gridLoading_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  circeOptions *arg1 = (circeOptions *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  result = (std::string *) & ((arg1)->gridLoading);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_circeOptions_1logPathname_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circeOptions *arg1 = (circeOptions *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->logPathname = *arg2;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_circeOptions_1logPathname_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  circeOptions *arg1 = (circeOptions *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  result = (std::string *) & ((arg1)->logPathname);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_circeOptions_1optionFile_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circeOptions *arg1 = (circeOptions *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->optionFile = *arg2;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_circeOptions_1optionFile_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  circeOptions *arg1 = (circeOptions *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  result = (std::string *) & ((arg1)->optionFile);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_circeOptions_1imageFilename_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circeOptions *arg1 = (circeOptions *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->imageFilename = *arg2;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_circeOptions_1imageFilename_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  circeOptions *arg1 = (circeOptions *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  result = (std::string *) & ((arg1)->imageFilename);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_circeOptions_1logoFilename_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circeOptions *arg1 = (circeOptions *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->logoFilename = *arg2;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_circeOptions_1logoFilename_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  circeOptions *arg1 = (circeOptions *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  result = (std::string *) & ((arg1)->logoFilename);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_circeOptions_1iconFilename_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circeOptions *arg1 = (circeOptions *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->iconFilename = *arg2;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_circeOptions_1iconFilename_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  circeOptions *arg1 = (circeOptions *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  result = (std::string *) & ((arg1)->iconFilename);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_circeOptions_1boundaryFile_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circeOptions *arg1 = (circeOptions *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->boundaryFile = *arg2;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_circeOptions_1boundaryFile_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  circeOptions *arg1 = (circeOptions *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  result = (std::string *) & ((arg1)->boundaryFile);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_circeOptions_1displayHelp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  circeOptions *arg1 = (circeOptions *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->displayHelp = arg2;
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_circeOptions_1displayHelp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  circeOptions *arg1 = (circeOptions *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  result = (int) ((arg1)->displayHelp);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_circeOptions_1runTest_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  circeOptions *arg1 = (circeOptions *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->runTest = arg2;
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_circeOptions_1runTest_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  circeOptions *arg1 = (circeOptions *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  result = (int) ((arg1)->runTest);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_circeOptions_1multipleCRS_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  circeOptions *arg1 = (circeOptions *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->multipleCRS = arg2;
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_circeOptions_1multipleCRS_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  circeOptions *arg1 = (circeOptions *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  result = (int) ((arg1)->multipleCRS);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_circeOptions_1quiet_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  circeOptions *arg1 = (circeOptions *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->quiet = arg2;
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_circeOptions_1quiet_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  circeOptions *arg1 = (circeOptions *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  result = (int) ((arg1)->quiet);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_circeOptions_1verbose_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  circeOptions *arg1 = (circeOptions *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->verbose = arg2;
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_circeOptions_1verbose_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  circeOptions *arg1 = (circeOptions *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  result = (int) ((arg1)->verbose);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_circeOptions_1scaleConv_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  circeOptions *arg1 = (circeOptions *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->scaleConv = arg2;
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_circeOptions_1scaleConv_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  circeOptions *arg1 = (circeOptions *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  result = (int) ((arg1)->scaleConv);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_circeOptions_1processAsVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  circeOptions *arg1 = (circeOptions *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->processAsVector = arg2;
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_circeOptions_1processAsVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  circeOptions *arg1 = (circeOptions *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  result = (int) ((arg1)->processAsVector);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_circeOptions_1getCRSlist_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  circeOptions *arg1 = (circeOptions *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->getCRSlist = arg2;
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_circeOptions_1getCRSlist_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  circeOptions *arg1 = (circeOptions *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  result = (int) ((arg1)->getCRSlist);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_circeOptions_1getValidityArea_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  circeOptions *arg1 = (circeOptions *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->getValidityArea = arg2;
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_circeOptions_1getValidityArea_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  circeOptions *arg1 = (circeOptions *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  result = (int) ((arg1)->getValidityArea);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_circeOptions_1getAuthority_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  circeOptions *arg1 = (circeOptions *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->getAuthority = arg2;
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_circeOptions_1getAuthority_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  circeOptions *arg1 = (circeOptions *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  result = (int) ((arg1)->getAuthority);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_circeOptions_1followUpTransfos_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  circeOptions *arg1 = (circeOptions *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->followUpTransfos = arg2;
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_circeOptions_1followUpTransfos_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  circeOptions *arg1 = (circeOptions *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  result = (int) ((arg1)->followUpTransfos);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_circeOptions_1getSourceGeodeticFrame_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  circeOptions *arg1 = (circeOptions *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->getSourceGeodeticFrame = arg2;
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_circeOptions_1getSourceGeodeticFrame_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  circeOptions *arg1 = (circeOptions *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  result = (int) ((arg1)->getSourceGeodeticFrame);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_circeOptions_1getSourceGeodeticCRS_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  circeOptions *arg1 = (circeOptions *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->getSourceGeodeticCRS = arg2;
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_circeOptions_1getSourceGeodeticCRS_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  circeOptions *arg1 = (circeOptions *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  result = (int) ((arg1)->getSourceGeodeticCRS);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_circeOptions_1getSourceVerticalCRS_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  circeOptions *arg1 = (circeOptions *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->getSourceVerticalCRS = arg2;
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_circeOptions_1getSourceVerticalCRS_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  circeOptions *arg1 = (circeOptions *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  result = (int) ((arg1)->getSourceVerticalCRS);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_circeOptions_1getTargetGeodeticFrame_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  circeOptions *arg1 = (circeOptions *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->getTargetGeodeticFrame = arg2;
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_circeOptions_1getTargetGeodeticFrame_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  circeOptions *arg1 = (circeOptions *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  result = (int) ((arg1)->getTargetGeodeticFrame);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_circeOptions_1getTargetGeodeticCRS_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  circeOptions *arg1 = (circeOptions *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->getTargetGeodeticCRS = arg2;
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_circeOptions_1getTargetGeodeticCRS_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  circeOptions *arg1 = (circeOptions *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  result = (int) ((arg1)->getTargetGeodeticCRS);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_circeOptions_1getTargetVerticalCRS_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  circeOptions *arg1 = (circeOptions *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->getTargetVerticalCRS = arg2;
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_circeOptions_1getTargetVerticalCRS_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  circeOptions *arg1 = (circeOptions *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  result = (int) ((arg1)->getTargetVerticalCRS);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_circeOptions_1getDataFileFormat_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  circeOptions *arg1 = (circeOptions *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->getDataFileFormat = arg2;
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_circeOptions_1getDataFileFormat_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  circeOptions *arg1 = (circeOptions *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  result = (int) ((arg1)->getDataFileFormat);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_circeOptions_1getDataPointFormat_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  circeOptions *arg1 = (circeOptions *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->getDataPointFormat = arg2;
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_circeOptions_1getDataPointFormat_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  circeOptions *arg1 = (circeOptions *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  result = (int) ((arg1)->getDataPointFormat);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_circeOptions_1getUom_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  circeOptions *arg1 = (circeOptions *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->getUom = arg2;
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_circeOptions_1getUom_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  circeOptions *arg1 = (circeOptions *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  result = (int) ((arg1)->getUom);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_circeOptions_1getGeodeticTransfo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  circeOptions *arg1 = (circeOptions *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->getGeodeticTransfo = arg2;
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_circeOptions_1getGeodeticTransfo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  circeOptions *arg1 = (circeOptions *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  result = (int) ((arg1)->getGeodeticTransfo);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_circeOptions_1getVerticalTransfo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  circeOptions *arg1 = (circeOptions *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->getVerticalTransfo = arg2;
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_circeOptions_1getVerticalTransfo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  circeOptions *arg1 = (circeOptions *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  result = (int) ((arg1)->getVerticalTransfo);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_circeOptions_1getAllGeodeticSubsetLists_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  circeOptions *arg1 = (circeOptions *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->getAllGeodeticSubsetLists = arg2;
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_circeOptions_1getAllGeodeticSubsetLists_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  circeOptions *arg1 = (circeOptions *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  result = (int) ((arg1)->getAllGeodeticSubsetLists);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_circeOptions_1getZoneList_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  circeOptions *arg1 = (circeOptions *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->getZoneList = arg2;
}


SWIGEXPORT jint JNICALL Java_ign_circe_circeJNI_circeOptions_1getZoneList_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  circeOptions *arg1 = (circeOptions *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  result = (int) ((arg1)->getZoneList);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_circeOptions_1Pt4d_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  circeOptions *arg1 = (circeOptions *) 0 ;
  circe::pt4d *arg2 = (circe::pt4d *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(circeOptions **)&jarg1; 
  arg2 = *(circe::pt4d **)&jarg2; 
  if (arg1) (arg1)->Pt4d = *arg2;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_circeOptions_1Pt4d_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  circeOptions *arg1 = (circeOptions *) 0 ;
  circe::pt4d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  result = (circe::pt4d *)& ((arg1)->Pt4d);
  *(circe::pt4d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_circeOptions_1printCS_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  circeOptions *arg1 = (circeOptions *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->printCS = arg2;
}


SWIGEXPORT jboolean JNICALL Java_ign_circe_circeJNI_circeOptions_1printCS_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  circeOptions *arg1 = (circeOptions *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  result = (bool) ((arg1)->printCS);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_circeOptions_1displayBoundingBox_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  circeOptions *arg1 = (circeOptions *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->displayBoundingBox = arg2;
}


SWIGEXPORT jboolean JNICALL Java_ign_circe_circeJNI_circeOptions_1displayBoundingBox_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  circeOptions *arg1 = (circeOptions *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  result = (bool) ((arg1)->displayBoundingBox);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_circeOptions_1noPrintSppm_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  circeOptions *arg1 = (circeOptions *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->noPrintSppm = arg2;
}


SWIGEXPORT jboolean JNICALL Java_ign_circe_circeJNI_circeOptions_1noPrintSppm_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  circeOptions *arg1 = (circeOptions *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  result = (bool) ((arg1)->noPrintSppm);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_circeOptions_1noUseVerticalFrameAuthoritative_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  circeOptions *arg1 = (circeOptions *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->noUseVerticalFrameAuthoritative = arg2;
}


SWIGEXPORT jboolean JNICALL Java_ign_circe_circeJNI_circeOptions_1noUseVerticalFrameAuthoritative_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  circeOptions *arg1 = (circeOptions *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  result = (bool) ((arg1)->noUseVerticalFrameAuthoritative);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_circeOptions_1scrollArea_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  circeOptions *arg1 = (circeOptions *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->scrollArea = arg2;
}


SWIGEXPORT jboolean JNICALL Java_ign_circe_circeJNI_circeOptions_1scrollArea_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  circeOptions *arg1 = (circeOptions *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  result = (bool) ((arg1)->scrollArea);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_circeOptions_1plainDMS_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  circeOptions *arg1 = (circeOptions *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->plainDMS = arg2;
}


SWIGEXPORT jboolean JNICALL Java_ign_circe_circeJNI_circeOptions_1plainDMS_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  circeOptions *arg1 = (circeOptions *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  result = (bool) ((arg1)->plainDMS);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_circeOptions_1displayPrecision_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  circeOptions *arg1 = (circeOptions *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->displayPrecision = arg2;
}


SWIGEXPORT jdouble JNICALL Java_ign_circe_circeJNI_circeOptions_1displayPrecision_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  circeOptions *arg1 = (circeOptions *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  result = (double) ((arg1)->displayPrecision);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_circeOptions_1outputFormat_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circeOptions *arg1 = (circeOptions *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->outputFormat = *arg2;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_circeOptions_1outputFormat_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  circeOptions *arg1 = (circeOptions *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  result = (std::string *) & ((arg1)->outputFormat);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_circeOptions_1operationType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  circeOptions *arg1 = (circeOptions *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->operationType = *arg2;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_circeOptions_1operationType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  circeOptions *arg1 = (circeOptions *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circeOptions **)&jarg1; 
  result = (std::string *) & ((arg1)->operationType);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_new_1circeOptions(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  circeOptions *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (circeOptions *)new circeOptions();
  *(circeOptions **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_delete_1circeOptions(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  circeOptions *arg1 = (circeOptions *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(circeOptions **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_new_1vectorPt4d_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< circe::pt4d > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< circe::pt4d > *)new std::vector< circe::pt4d >();
  *(std::vector< circe::pt4d > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_new_1vectorPt4d_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< circe::pt4d >::size_type arg1 ;
  std::vector< circe::pt4d > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< circe::pt4d >::size_type)jarg1; 
  result = (std::vector< circe::pt4d > *)new std::vector< circe::pt4d >(arg1);
  *(std::vector< circe::pt4d > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_vectorPt4d_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< circe::pt4d > *arg1 = (std::vector< circe::pt4d > *) 0 ;
  std::vector< circe::pt4d >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< circe::pt4d > **)&jarg1; 
  result = ((std::vector< circe::pt4d > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_vectorPt4d_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< circe::pt4d > *arg1 = (std::vector< circe::pt4d > *) 0 ;
  std::vector< circe::pt4d >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< circe::pt4d > **)&jarg1; 
  result = ((std::vector< circe::pt4d > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_vectorPt4d_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< circe::pt4d > *arg1 = (std::vector< circe::pt4d > *) 0 ;
  std::vector< circe::pt4d >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< circe::pt4d > **)&jarg1; 
  arg2 = (std::vector< circe::pt4d >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_ign_circe_circeJNI_vectorPt4d_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< circe::pt4d > *arg1 = (std::vector< circe::pt4d > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< circe::pt4d > **)&jarg1; 
  result = (bool)((std::vector< circe::pt4d > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_vectorPt4d_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< circe::pt4d > *arg1 = (std::vector< circe::pt4d > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< circe::pt4d > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_vectorPt4d_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< circe::pt4d > *arg1 = (std::vector< circe::pt4d > *) 0 ;
  std::vector< circe::pt4d >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< circe::pt4d > **)&jarg1; 
  arg2 = *(std::vector< circe::pt4d >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< circe::pt4d >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< circe::pt4d >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_vectorPt4d_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< circe::pt4d > *arg1 = (std::vector< circe::pt4d > *) 0 ;
  int arg2 ;
  std::vector< circe::pt4d >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< circe::pt4d > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< circe::pt4d >::value_type *) &std_vector_Sl_circe_pt4d_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< circe::pt4d >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_vectorPt4d_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< circe::pt4d > *arg1 = (std::vector< circe::pt4d > *) 0 ;
  int arg2 ;
  std::vector< circe::pt4d >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< circe::pt4d > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< circe::pt4d >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< circe::pt4d >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_circe_pt4d_Sg__set(arg1,arg2,(circe::pt4d const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_delete_1vectorPt4d(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< circe::pt4d > *arg1 = (std::vector< circe::pt4d > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< circe::pt4d > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_ign_circe_circeJNI_LoadGeodeticSet(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jint jarg3) {
  std::string arg1 ;
  circe::GeodeticSet *arg2 = (circe::GeodeticSet *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(circe::GeodeticSet **)&jarg2; 
  arg3 = (int)jarg3; 
  try {
    circe::LoadGeodeticSet(arg1,arg2,arg3);
  }
  catch(std::string &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, (&_e)->c_str());
    return ; 
  }
  
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_getGeodeticSubset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jstring jresult = 0 ;
  circe::operationSubset *arg1 = (circe::operationSubset *) 0 ;
  circe::circeOptions *arg2 = (circe::circeOptions *) 0 ;
  circe::GeodeticSet *arg3 = (circe::GeodeticSet *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(circe::operationSubset **)&jarg1; 
  arg2 = *(circe::circeOptions **)&jarg2; 
  arg3 = *(circe::GeodeticSet **)&jarg3; 
  try {
    result = circe::getGeodeticSubset(arg1,arg2,arg3);
  }
  catch(std::string &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, (&_e)->c_str());
    return 0; 
  }
  
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_ign_circe_circeJNI_hasVertical(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  std::string arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (bool)circe::hasVertical(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_readXMLOptionFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  circe::circeOptions *arg1 = (circe::circeOptions *) 0 ;
  std::string arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(circe::circeOptions **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    result = circe::readXMLOptionFile(arg1,arg2);
  }
  catch(std::string &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, (&_e)->c_str());
    return 0; 
  }
  
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_writeCommandLine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  circe::circeOptions arg1 ;
  circe::circeOptions *argp1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(circe::circeOptions **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null circe::circeOptions");
    return 0;
  }
  arg1 = *argp1; 
  try {
    result = circe::writeCommandLine(arg1);
  }
  catch(std::string &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, (&_e)->c_str());
    return 0; 
  }
  
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_writeXMLOptionFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  circe::circeOptions arg1 ;
  circe::circeOptions *argp1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(circe::circeOptions **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null circe::circeOptions");
    return 0;
  }
  arg1 = *argp1; 
  try {
    result = circe::writeXMLOptionFile(arg1);
  }
  catch(std::string &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, (&_e)->c_str());
    return 0; 
  }
  
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_getCRSList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jstring jresult = 0 ;
  circe::circeOptions arg1 ;
  circe::GeodeticSet *arg2 = (circe::GeodeticSet *) 0 ;
  circe::circeOptions *argp1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(circe::circeOptions **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null circe::circeOptions");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = *(circe::GeodeticSet **)&jarg2; 
  try {
    result = circe::getCRSList(arg1,arg2);
  }
  catch(std::string &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, (&_e)->c_str());
    return 0; 
  }
  
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_getValidityArea(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jstring jresult = 0 ;
  circe::circeOptions arg1 ;
  circe::GeodeticSet *arg2 = (circe::GeodeticSet *) 0 ;
  circe::MEASURE_UNIT arg3 ;
  circe::circeOptions *argp1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(circe::circeOptions **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null circe::circeOptions");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = *(circe::GeodeticSet **)&jarg2; 
  arg3 = (circe::MEASURE_UNIT)jarg3; 
  try {
    result = circe::getValidityArea(arg1,arg2,arg3);
  }
  catch(std::string &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, (&_e)->c_str());
    return 0; 
  }
  
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_process_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jstring jresult = 0 ;
  std::string arg1 ;
  circe::GeodeticSet *arg2 = (circe::GeodeticSet *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(circe::GeodeticSet **)&jarg2; 
  try {
    result = circe::process(arg1,arg2);
  }
  catch(std::string &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, (&_e)->c_str());
    return 0; 
  }
  
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ign_circe_circeJNI_process_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jstring jresult = 0 ;
  std::string *arg1 = 0 ;
  std::vector< double > *arg2 = 0 ;
  circe::GeodeticSet *arg3 = (circe::GeodeticSet *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  (void)jarg3_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(std::vector< double > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > & reference is null");
    return 0;
  } 
  arg3 = *(circe::GeodeticSet **)&jarg3; 
  try {
    result = circe::process((std::string const &)*arg1,*arg2,arg3);
  }
  catch(std::string &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, (&_e)->c_str());
    return 0; 
  }
  
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_process_1pt4d(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  std::string arg1 ;
  circe::GeodeticSet *arg2 = (circe::GeodeticSet *) 0 ;
  circe::pt4d result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(circe::GeodeticSet **)&jarg2; 
  try {
    result = circe::process_pt4d(arg1,arg2);
  }
  catch(std::string &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, (&_e)->c_str());
    return 0; 
  }
  
  *(circe::pt4d **)&jresult = new circe::pt4d((const circe::pt4d &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_CirceBoundedObject_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(circe::CirceObject **)&baseptr = *(circe::CirceBoundedObject **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_Ellipsoid_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(circe::CirceObject **)&baseptr = *(circe::Ellipsoid **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_Meridian_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(circe::CirceObject **)&baseptr = *(circe::Meridian **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_ReferenceFrame_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(circe::CirceBoundedObject **)&baseptr = *(circe::ReferenceFrame **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_ReferenceSystem_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(circe::CirceBoundedObject **)&baseptr = *(circe::ReferenceSystem **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_GeodeticReferenceSystem_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(circe::ReferenceSystem **)&baseptr = *(circe::GeodeticReferenceSystem **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_GeodeticReferenceFrame_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(circe::ReferenceFrame **)&baseptr = *(circe::GeodeticReferenceFrame **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_VerticalReferenceSystem_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(circe::ReferenceSystem **)&baseptr = *(circe::VerticalReferenceSystem **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_VerticalReferenceFrame_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(circe::ReferenceFrame **)&baseptr = *(circe::VerticalReferenceFrame **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_Operation_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(circe::CirceBoundedObject **)&baseptr = *(circe::Operation **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_Conversion_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(circe::Operation **)&baseptr = *(circe::Conversion **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_ProjectionLCC_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(circe::Conversion **)&baseptr = *(circe::ProjectionLCC **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_ProjectionTMerc_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(circe::Conversion **)&baseptr = *(circe::ProjectionTMerc **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_ProjectionGLab_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(circe::Conversion **)&baseptr = *(circe::ProjectionGLab **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_ProjectionLAEA_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(circe::Conversion **)&baseptr = *(circe::ProjectionLAEA **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_ProjectionSouthPolarStereographic_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(circe::Conversion **)&baseptr = *(circe::ProjectionSouthPolarStereographic **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_Transformation_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(circe::Operation **)&baseptr = *(circe::Transformation **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_CRS_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(circe::CirceBoundedObject **)&baseptr = *(circe::CRS **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_ign_circe_circeJNI_GeodeticSet_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(circe::CirceBoundedObject **)&baseptr = *(circe::GeodeticSet **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

